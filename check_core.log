
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `

    # gold design
    read_verilog ./verilog/*.v
    prep -flatten -top mkrestoring_div
    design -stash gold
    
    # gate design
    read_verilog synth_div.yv
    read_liberty  -ignore_miss_func ./lib/sky130_fd_sc_hvl__tt_100C_3v30.lib
    prep -flatten -top mkrestoring_div
    design -stash gate
    

    # prove equivalence
    design -copy-from gold -as gold mkrestoring_div
    design -copy-from gate -as gate mkrestoring_div
    equiv_make gold gate equiv
    hierarchy -top equiv
    #show -pause
    equiv_induct
    equiv_status -assert
' --

1. Executing Verilog-2005 frontend: ./verilog/BRAM1.v
Parsing Verilog input from `./verilog/BRAM1.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) translate_off' comments.
Yosys does support them but it is recommended to use `ifdef constructs instead!
Generating RTLIL representation for module `\BRAM1'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ./verilog/BRAM1BE.v
Parsing Verilog input from `./verilog/BRAM1BE.v' to AST representation.
Generating RTLIL representation for module `\BRAM1BE'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./verilog/BRAM2.v
Parsing Verilog input from `./verilog/BRAM2.v' to AST representation.
Generating RTLIL representation for module `\BRAM2'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ./verilog/BypassCrossingWire.v
Parsing Verilog input from `./verilog/BypassCrossingWire.v' to AST representation.
Generating RTLIL representation for module `\BypassCrossingWire'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ./verilog/BypassWire.v
Parsing Verilog input from `./verilog/BypassWire.v' to AST representation.
Generating RTLIL representation for module `\BypassWire'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: ./verilog/BypassWire0.v
Parsing Verilog input from `./verilog/BypassWire0.v' to AST representation.
Generating RTLIL representation for module `\BypassWire0'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: ./verilog/CRegA5.v
Parsing Verilog input from `./verilog/CRegA5.v' to AST representation.
Generating RTLIL representation for module `\CRegA5'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: ./verilog/CRegN5.v
Parsing Verilog input from `./verilog/CRegN5.v' to AST representation.
Generating RTLIL representation for module `\CRegN5'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: ./verilog/CRegUN5.v
Parsing Verilog input from `./verilog/CRegUN5.v' to AST representation.
Generating RTLIL representation for module `\CRegUN5'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: ./verilog/ClockDiv.v
Parsing Verilog input from `./verilog/ClockDiv.v' to AST representation.
Generating RTLIL representation for module `\ClockDiv'.
Note: Assuming pure combinatorial block at ./verilog/ClockDiv.v:60 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: ./verilog/ClockGen.v
Parsing Verilog input from `./verilog/ClockGen.v' to AST representation.
Generating RTLIL representation for module `\ClockGen'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: ./verilog/ClockInverter.v
Parsing Verilog input from `./verilog/ClockInverter.v' to AST representation.
Generating RTLIL representation for module `\ClockInverter'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: ./verilog/ClockMux.v
Parsing Verilog input from `./verilog/ClockMux.v' to AST representation.
Generating RTLIL representation for module `\ClockMux'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: ./verilog/ClockSelect.v
Parsing Verilog input from `./verilog/ClockSelect.v' to AST representation.
Generating RTLIL representation for module `\ClockSelect'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: ./verilog/ConfigRegA.v
Parsing Verilog input from `./verilog/ConfigRegA.v' to AST representation.
Generating RTLIL representation for module `\ConfigRegA'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: ./verilog/ConfigRegN.v
Parsing Verilog input from `./verilog/ConfigRegN.v' to AST representation.
Generating RTLIL representation for module `\ConfigRegN'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: ./verilog/ConfigRegUN.v
Parsing Verilog input from `./verilog/ConfigRegUN.v' to AST representation.
Generating RTLIL representation for module `\ConfigRegUN'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: ./verilog/ConstrainedRandom.v
Parsing Verilog input from `./verilog/ConstrainedRandom.v' to AST representation.
Generating RTLIL representation for module `\ConstrainedRandom'.
./verilog/ConstrainedRandom.v:40: Warning: Identifier `\$random' is implicitly declared.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: ./verilog/Counter.v
Parsing Verilog input from `./verilog/Counter.v' to AST representation.
Generating RTLIL representation for module `\Counter'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: ./verilog/CrossingBypassWire.v
Parsing Verilog input from `./verilog/CrossingBypassWire.v' to AST representation.
Generating RTLIL representation for module `\CrossingBypassWire'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: ./verilog/CrossingRegA.v
Parsing Verilog input from `./verilog/CrossingRegA.v' to AST representation.
Generating RTLIL representation for module `\CrossingRegA'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: ./verilog/CrossingRegN.v
Parsing Verilog input from `./verilog/CrossingRegN.v' to AST representation.
Generating RTLIL representation for module `\CrossingRegN'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: ./verilog/CrossingRegUN.v
Parsing Verilog input from `./verilog/CrossingRegUN.v' to AST representation.
Generating RTLIL representation for module `\CrossingRegUN'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: ./verilog/DualPortRam.v
Parsing Verilog input from `./verilog/DualPortRam.v' to AST representation.
Generating RTLIL representation for module `\DualPortRam'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: ./verilog/Empty.v
Parsing Verilog input from `./verilog/Empty.v' to AST representation.
Generating RTLIL representation for module `\Empty'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: ./verilog/FIFO1.v
Parsing Verilog input from `./verilog/FIFO1.v' to AST representation.
Generating RTLIL representation for module `\FIFO1'.
Successfully finished Verilog frontend.

27. Executing Verilog-2005 frontend: ./verilog/FIFO10.v
Parsing Verilog input from `./verilog/FIFO10.v' to AST representation.
Generating RTLIL representation for module `\FIFO10'.
Successfully finished Verilog frontend.

28. Executing Verilog-2005 frontend: ./verilog/FIFO2.v
Parsing Verilog input from `./verilog/FIFO2.v' to AST representation.
Generating RTLIL representation for module `\FIFO2'.
Successfully finished Verilog frontend.

29. Executing Verilog-2005 frontend: ./verilog/FIFO20.v
Parsing Verilog input from `./verilog/FIFO20.v' to AST representation.
Generating RTLIL representation for module `\FIFO20'.
Successfully finished Verilog frontend.

30. Executing Verilog-2005 frontend: ./verilog/FIFOL1.v
Parsing Verilog input from `./verilog/FIFOL1.v' to AST representation.
Generating RTLIL representation for module `\FIFOL1'.
Successfully finished Verilog frontend.

31. Executing Verilog-2005 frontend: ./verilog/FIFOL10.v
Parsing Verilog input from `./verilog/FIFOL10.v' to AST representation.
Generating RTLIL representation for module `\FIFOL10'.
Successfully finished Verilog frontend.

32. Executing Verilog-2005 frontend: ./verilog/FIFOL2.v
Parsing Verilog input from `./verilog/FIFOL2.v' to AST representation.
Generating RTLIL representation for module `\FIFOL2'.
Successfully finished Verilog frontend.

33. Executing Verilog-2005 frontend: ./verilog/FIFOL20.v
Parsing Verilog input from `./verilog/FIFOL20.v' to AST representation.
Generating RTLIL representation for module `\FIFOL20'.
Successfully finished Verilog frontend.

34. Executing Verilog-2005 frontend: ./verilog/Fork.v
Parsing Verilog input from `./verilog/Fork.v' to AST representation.
Generating RTLIL representation for module `\Fork'.
Successfully finished Verilog frontend.

35. Executing Verilog-2005 frontend: ./verilog/GatedClock.v
Parsing Verilog input from `./verilog/GatedClock.v' to AST representation.
Generating RTLIL representation for module `\GatedClock'.
Note: Assuming pure combinatorial block at ./verilog/GatedClock.v:62 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

36. Executing Verilog-2005 frontend: ./verilog/GatedClockDiv.v
Parsing Verilog input from `./verilog/GatedClockDiv.v' to AST representation.
Generating RTLIL representation for module `\GatedClockDiv'.
Note: Assuming pure combinatorial block at ./verilog/GatedClockDiv.v:70 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/GatedClockDiv.v:99 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

37. Executing Verilog-2005 frontend: ./verilog/GatedClockInverter.v
Parsing Verilog input from `./verilog/GatedClockInverter.v' to AST representation.
Generating RTLIL representation for module `\GatedClockInverter'.
Note: Assuming pure combinatorial block at ./verilog/GatedClockInverter.v:27 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

38. Executing Verilog-2005 frontend: ./verilog/InitialReset.v
Parsing Verilog input from `./verilog/InitialReset.v' to AST representation.
Generating RTLIL representation for module `\InitialReset'.
Successfully finished Verilog frontend.

39. Executing Verilog-2005 frontend: ./verilog/LatchCrossingReg.v
Parsing Verilog input from `./verilog/LatchCrossingReg.v' to AST representation.
Generating RTLIL representation for module `\LatchCrossingReg'.
Note: Assuming pure combinatorial block at ./verilog/LatchCrossingReg.v:46 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

40. Executing Verilog-2005 frontend: ./verilog/MakeClock.v
Parsing Verilog input from `./verilog/MakeClock.v' to AST representation.
Generating RTLIL representation for module `\MakeClock'.
Note: Assuming pure combinatorial block at ./verilog/MakeClock.v:99 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

41. Executing Verilog-2005 frontend: ./verilog/MakeReset.v
Parsing Verilog input from `./verilog/MakeReset.v' to AST representation.
Generating RTLIL representation for module `\MakeReset'.
Successfully finished Verilog frontend.

42. Executing Verilog-2005 frontend: ./verilog/MakeReset0.v
Parsing Verilog input from `./verilog/MakeReset0.v' to AST representation.
Generating RTLIL representation for module `\MakeReset0'.
Successfully finished Verilog frontend.

43. Executing Verilog-2005 frontend: ./verilog/MakeResetA.v
Parsing Verilog input from `./verilog/MakeResetA.v' to AST representation.
Generating RTLIL representation for module `\MakeResetA'.
Successfully finished Verilog frontend.

44. Executing Verilog-2005 frontend: ./verilog/ProbeCapture.v
Parsing Verilog input from `./verilog/ProbeCapture.v' to AST representation.
Generating RTLIL representation for module `\ProbeCapture'.
Note: Assuming pure combinatorial block at ./verilog/ProbeCapture.v:161 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

45. Executing Verilog-2005 frontend: ./verilog/ProbeMux.v
Parsing Verilog input from `./verilog/ProbeMux.v' to AST representation.
Generating RTLIL representation for module `\ProbeMux'.
Successfully finished Verilog frontend.

46. Executing Verilog-2005 frontend: ./verilog/ProbeTrigger.v
Parsing Verilog input from `./verilog/ProbeTrigger.v' to AST representation.
Generating RTLIL representation for module `\ProbeTrigger'.
Successfully finished Verilog frontend.

47. Executing Verilog-2005 frontend: ./verilog/ProbeValue.v
Parsing Verilog input from `./verilog/ProbeValue.v' to AST representation.
Generating RTLIL representation for module `\ProbeValue'.
Successfully finished Verilog frontend.

48. Executing Verilog-2005 frontend: ./verilog/ProbeWire.v
Parsing Verilog input from `./verilog/ProbeWire.v' to AST representation.
Generating RTLIL representation for module `\ProbeWire'.
Successfully finished Verilog frontend.

49. Executing Verilog-2005 frontend: ./verilog/RWire.v
Parsing Verilog input from `./verilog/RWire.v' to AST representation.
Generating RTLIL representation for module `\RWire'.
Successfully finished Verilog frontend.

50. Executing Verilog-2005 frontend: ./verilog/RWire0.v
Parsing Verilog input from `./verilog/RWire0.v' to AST representation.
Generating RTLIL representation for module `\RWire0'.
Successfully finished Verilog frontend.

51. Executing Verilog-2005 frontend: ./verilog/RegA.v
Parsing Verilog input from `./verilog/RegA.v' to AST representation.
Generating RTLIL representation for module `\RegA'.
Successfully finished Verilog frontend.

52. Executing Verilog-2005 frontend: ./verilog/RegAligned.v
Parsing Verilog input from `./verilog/RegAligned.v' to AST representation.
Generating RTLIL representation for module `\RegAligned'.
Successfully finished Verilog frontend.

53. Executing Verilog-2005 frontend: ./verilog/RegFile.v
Parsing Verilog input from `./verilog/RegFile.v' to AST representation.
Generating RTLIL representation for module `\RegFile'.
Successfully finished Verilog frontend.

54. Executing Verilog-2005 frontend: ./verilog/RegN.v
Parsing Verilog input from `./verilog/RegN.v' to AST representation.
Generating RTLIL representation for module `\RegN'.
Successfully finished Verilog frontend.

55. Executing Verilog-2005 frontend: ./verilog/RegTwoA.v
Parsing Verilog input from `./verilog/RegTwoA.v' to AST representation.
Generating RTLIL representation for module `\RegTwoA'.
Successfully finished Verilog frontend.

56. Executing Verilog-2005 frontend: ./verilog/RegTwoN.v
Parsing Verilog input from `./verilog/RegTwoN.v' to AST representation.
Generating RTLIL representation for module `\RegTwoN'.
Successfully finished Verilog frontend.

57. Executing Verilog-2005 frontend: ./verilog/RegTwoUN.v
Parsing Verilog input from `./verilog/RegTwoUN.v' to AST representation.
Generating RTLIL representation for module `\RegTwoUN'.
Successfully finished Verilog frontend.

58. Executing Verilog-2005 frontend: ./verilog/RegUN.v
Parsing Verilog input from `./verilog/RegUN.v' to AST representation.
Generating RTLIL representation for module `\RegUN'.
Successfully finished Verilog frontend.

59. Executing Verilog-2005 frontend: ./verilog/ResetEither.v
Parsing Verilog input from `./verilog/ResetEither.v' to AST representation.
Generating RTLIL representation for module `\ResetEither'.
Successfully finished Verilog frontend.

60. Executing Verilog-2005 frontend: ./verilog/ResetInverter.v
Parsing Verilog input from `./verilog/ResetInverter.v' to AST representation.
Generating RTLIL representation for module `\ResetInverter'.
Successfully finished Verilog frontend.

61. Executing Verilog-2005 frontend: ./verilog/ResetMux.v
Parsing Verilog input from `./verilog/ResetMux.v' to AST representation.
Generating RTLIL representation for module `\ResetMux'.
Successfully finished Verilog frontend.

62. Executing Verilog-2005 frontend: ./verilog/ResetToBool.v
Parsing Verilog input from `./verilog/ResetToBool.v' to AST representation.
Generating RTLIL representation for module `\ResetToBool'.
Successfully finished Verilog frontend.

63. Executing Verilog-2005 frontend: ./verilog/RevertReg.v
Parsing Verilog input from `./verilog/RevertReg.v' to AST representation.
Generating RTLIL representation for module `\RevertReg'.
Successfully finished Verilog frontend.

64. Executing Verilog-2005 frontend: ./verilog/SampleReg.v
Parsing Verilog input from `./verilog/SampleReg.v' to AST representation.
Generating RTLIL representation for module `\SampleReg'.
Successfully finished Verilog frontend.

65. Executing Verilog-2005 frontend: ./verilog/ScanIn.v
Parsing Verilog input from `./verilog/ScanIn.v' to AST representation.
Generating RTLIL representation for module `\ScanIn'.
Successfully finished Verilog frontend.

66. Executing Verilog-2005 frontend: ./verilog/SizedFIFO.v
Parsing Verilog input from `./verilog/SizedFIFO.v' to AST representation.
Generating RTLIL representation for module `\SizedFIFO'.
Successfully finished Verilog frontend.

67. Executing Verilog-2005 frontend: ./verilog/SizedFIFO0.v
Parsing Verilog input from `./verilog/SizedFIFO0.v' to AST representation.
Generating RTLIL representation for module `\SizedFIFO0'.
Successfully finished Verilog frontend.

68. Executing Verilog-2005 frontend: ./verilog/SizedFIFOL.v
Parsing Verilog input from `./verilog/SizedFIFOL.v' to AST representation.
Generating RTLIL representation for module `\SizedFIFOL'.
Successfully finished Verilog frontend.

69. Executing Verilog-2005 frontend: ./verilog/SizedFIFOL0.v
Parsing Verilog input from `./verilog/SizedFIFOL0.v' to AST representation.
Generating RTLIL representation for module `\SizedFIFOL0'.
Successfully finished Verilog frontend.

70. Executing Verilog-2005 frontend: ./verilog/SyncBit.v
Parsing Verilog input from `./verilog/SyncBit.v' to AST representation.
Generating RTLIL representation for module `\SyncBit'.
Successfully finished Verilog frontend.

71. Executing Verilog-2005 frontend: ./verilog/SyncBit05.v
Parsing Verilog input from `./verilog/SyncBit05.v' to AST representation.
Generating RTLIL representation for module `\SyncBit05'.
Successfully finished Verilog frontend.

72. Executing Verilog-2005 frontend: ./verilog/SyncBit1.v
Parsing Verilog input from `./verilog/SyncBit1.v' to AST representation.
Generating RTLIL representation for module `\SyncBit1'.
Successfully finished Verilog frontend.

73. Executing Verilog-2005 frontend: ./verilog/SyncBit15.v
Parsing Verilog input from `./verilog/SyncBit15.v' to AST representation.
Generating RTLIL representation for module `\SyncBit15'.
Successfully finished Verilog frontend.

74. Executing Verilog-2005 frontend: ./verilog/SyncFIFO.v
Parsing Verilog input from `./verilog/SyncFIFO.v' to AST representation.
Generating RTLIL representation for module `\SyncFIFO'.
Successfully finished Verilog frontend.

75. Executing Verilog-2005 frontend: ./verilog/SyncFIFO0.v
Parsing Verilog input from `./verilog/SyncFIFO0.v' to AST representation.
Generating RTLIL representation for module `\SyncFIFO0'.
Successfully finished Verilog frontend.

76. Executing Verilog-2005 frontend: ./verilog/SyncFIFO1.v
Parsing Verilog input from `./verilog/SyncFIFO1.v' to AST representation.
Generating RTLIL representation for module `\SyncFIFO1'.
Successfully finished Verilog frontend.

77. Executing Verilog-2005 frontend: ./verilog/SyncFIFO10.v
Parsing Verilog input from `./verilog/SyncFIFO10.v' to AST representation.
Generating RTLIL representation for module `\SyncFIFO10'.
Successfully finished Verilog frontend.

78. Executing Verilog-2005 frontend: ./verilog/SyncFIFOLevel.v
Parsing Verilog input from `./verilog/SyncFIFOLevel.v' to AST representation.
Generating RTLIL representation for module `\SyncFIFOLevel'.
Successfully finished Verilog frontend.

79. Executing Verilog-2005 frontend: ./verilog/SyncFIFOLevel0.v
Parsing Verilog input from `./verilog/SyncFIFOLevel0.v' to AST representation.
Generating RTLIL representation for module `\SyncFIFOLevel0'.
Successfully finished Verilog frontend.

80. Executing Verilog-2005 frontend: ./verilog/SyncHandshake.v
Parsing Verilog input from `./verilog/SyncHandshake.v' to AST representation.
Generating RTLIL representation for module `\SyncHandshake'.
Successfully finished Verilog frontend.

81. Executing Verilog-2005 frontend: ./verilog/SyncPulse.v
Parsing Verilog input from `./verilog/SyncPulse.v' to AST representation.
Generating RTLIL representation for module `\SyncPulse'.
Successfully finished Verilog frontend.

82. Executing Verilog-2005 frontend: ./verilog/SyncRegister.v
Parsing Verilog input from `./verilog/SyncRegister.v' to AST representation.
Generating RTLIL representation for module `\SyncRegister'.
Successfully finished Verilog frontend.

83. Executing Verilog-2005 frontend: ./verilog/SyncReset.v
Parsing Verilog input from `./verilog/SyncReset.v' to AST representation.
Generating RTLIL representation for module `\SyncReset'.
Successfully finished Verilog frontend.

84. Executing Verilog-2005 frontend: ./verilog/SyncReset0.v
Parsing Verilog input from `./verilog/SyncReset0.v' to AST representation.
Generating RTLIL representation for module `\SyncReset0'.
Successfully finished Verilog frontend.

85. Executing Verilog-2005 frontend: ./verilog/SyncResetA.v
Parsing Verilog input from `./verilog/SyncResetA.v' to AST representation.
Generating RTLIL representation for module `\SyncResetA'.
Successfully finished Verilog frontend.

86. Executing Verilog-2005 frontend: ./verilog/SyncWire.v
Parsing Verilog input from `./verilog/SyncWire.v' to AST representation.
Generating RTLIL representation for module `\SyncWire'.
Successfully finished Verilog frontend.

87. Executing Verilog-2005 frontend: ./verilog/TriState.v
Parsing Verilog input from `./verilog/TriState.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (./verilog/TriState.v:27)
Generating RTLIL representation for module `\TriState'.
Successfully finished Verilog frontend.

88. Executing Verilog-2005 frontend: ./verilog/UngatedClockMux.v
Parsing Verilog input from `./verilog/UngatedClockMux.v' to AST representation.
Generating RTLIL representation for module `\UngatedClockMux'.
Successfully finished Verilog frontend.

89. Executing Verilog-2005 frontend: ./verilog/UngatedClockSelect.v
Parsing Verilog input from `./verilog/UngatedClockSelect.v' to AST representation.
Generating RTLIL representation for module `\UngatedClockSelect'.
Successfully finished Verilog frontend.

90. Executing Verilog-2005 frontend: ./verilog/bram_1r1w.v
Parsing Verilog input from `./verilog/bram_1r1w.v' to AST representation.
Generating RTLIL representation for module `\bram_1r1w'.
Successfully finished Verilog frontend.

91. Executing Verilog-2005 frontend: ./verilog/bram_1rw.v
Parsing Verilog input from `./verilog/bram_1rw.v' to AST representation.
Generating RTLIL representation for module `\bram_1rw'.
Successfully finished Verilog frontend.

92. Executing Verilog-2005 frontend: ./verilog/bram_2rw.v
Parsing Verilog input from `./verilog/bram_2rw.v' to AST representation.
Generating RTLIL representation for module `\bram_2rw'.
Successfully finished Verilog frontend.

93. Executing Verilog-2005 frontend: ./verilog/mk_csr_daisy.v
Parsing Verilog input from `./verilog/mk_csr_daisy.v' to AST representation.
Generating RTLIL representation for module `\mk_csr_daisy'.
Successfully finished Verilog frontend.

94. Executing Verilog-2005 frontend: ./verilog/mk_csr_grp1.v
Parsing Verilog input from `./verilog/mk_csr_grp1.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) parallel_case' comments.
Yosys does support them but it is recommended to use Verilog `parallel_case' attributes instead!
Generating RTLIL representation for module `\mk_csr_grp1'.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:902 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:911 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:1052 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:1085 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:1102 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:1207 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:1247 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:1266 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:1538 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp1.v:1619 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

95. Executing Verilog-2005 frontend: ./verilog/mk_csr_grp2.v
Parsing Verilog input from `./verilog/mk_csr_grp2.v' to AST representation.
Generating RTLIL representation for module `\mk_csr_grp2'.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp2.v:331 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp2.v:571 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp2.v:610 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

96. Executing Verilog-2005 frontend: ./verilog/mk_csr_grp3.v
Parsing Verilog input from `./verilog/mk_csr_grp3.v' to AST representation.
Generating RTLIL representation for module `\mk_csr_grp3'.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp3.v:352 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp3.v:468 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp3.v:480 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp3.v:492 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp3.v:507 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

97. Executing Verilog-2005 frontend: ./verilog/mk_csr_grp4.v
Parsing Verilog input from `./verilog/mk_csr_grp4.v' to AST representation.
Generating RTLIL representation for module `\mk_csr_grp4'.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp4.v:354 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp4.v:605 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp4.v:665 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

98. Executing Verilog-2005 frontend: ./verilog/mk_csr_grp5.v
Parsing Verilog input from `./verilog/mk_csr_grp5.v' to AST representation.
Generating RTLIL representation for module `\mk_csr_grp5'.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp5.v:354 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp5.v:605 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp5.v:665 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

99. Executing Verilog-2005 frontend: ./verilog/mk_csr_grp6.v
Parsing Verilog input from `./verilog/mk_csr_grp6.v' to AST representation.
Generating RTLIL representation for module `\mk_csr_grp6'.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp6.v:354 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp6.v:605 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp6.v:665 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

100. Executing Verilog-2005 frontend: ./verilog/mk_csr_grp7.v
Parsing Verilog input from `./verilog/mk_csr_grp7.v' to AST representation.
Generating RTLIL representation for module `\mk_csr_grp7'.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp7.v:328 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp7.v:367 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mk_csr_grp7.v:585 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

101. Executing Verilog-2005 frontend: ./verilog/mkbpu.v
Parsing Verilog input from `./verilog/mkbpu.v' to AST representation.
Generating RTLIL representation for module `\mkbpu'.
Note: Assuming pure combinatorial block at ./verilog/mkbpu.v:19101 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkbpu.v:20128 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkbpu.v:21155 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkbpu.v:21168 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkbpu.v:21178 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

102. Executing Verilog-2005 frontend: ./verilog/mkccore_axi4.v
Parsing Verilog input from `./verilog/mkccore_axi4.v' to AST representation.
Generating RTLIL representation for module `\mkccore_axi4'.
Note: Assuming pure combinatorial block at ./verilog/mkccore_axi4.v:1998 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkccore_axi4.v:2028 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkccore_axi4.v:2243 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkccore_axi4.v:2601 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkccore_axi4.v:2609 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkccore_axi4.v:2617 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

103. Executing Verilog-2005 frontend: ./verilog/mkcombo_mul.v
Parsing Verilog input from `./verilog/mkcombo_mul.v' to AST representation.
Generating RTLIL representation for module `\mkcombo_mul'.
Successfully finished Verilog frontend.

104. Executing Verilog-2005 frontend: ./verilog/mkcsr.v
Parsing Verilog input from `./verilog/mkcsr.v' to AST representation.
Generating RTLIL representation for module `\mkcsr'.
Successfully finished Verilog frontend.

105. Executing Verilog-2005 frontend: ./verilog/mkdcache.v
Parsing Verilog input from `./verilog/mkdcache.v' to AST representation.
Generating RTLIL representation for module `\mkdcache'.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4217 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4238 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4259 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4280 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4301 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4322 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4343 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4364 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4385 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4406 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4427 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4448 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4469 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4490 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4511 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4532 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4553 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4574 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4595 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4616 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4637 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4658 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4679 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4700 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4721 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4742 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4763 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4784 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4805 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4826 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4847 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4868 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4889 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4910 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4931 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4952 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4973 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:4994 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5015 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5036 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5057 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5078 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5099 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5120 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5141 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5162 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5183 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5204 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5225 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5246 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5267 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5288 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5309 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5330 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5351 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5372 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5393 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5414 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5435 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5456 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5477 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5498 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5519 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5540 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5561 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5582 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5603 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5624 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5645 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5666 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5687 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5708 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5729 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5750 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5771 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5792 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5813 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5834 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5855 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5876 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5897 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5918 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5939 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5960 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:5981 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6002 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6023 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6044 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6065 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6086 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6107 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6128 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6149 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6170 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6191 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6212 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6233 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6254 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6275 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6296 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6317 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6338 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6359 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6380 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6401 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6422 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6443 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6464 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6485 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6506 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6527 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6548 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6569 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6590 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6611 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6632 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6653 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6674 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6695 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6716 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6737 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6758 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6779 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6800 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6821 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6842 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6863 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6884 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6937 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6971 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:6993 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:7009 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:7026 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:7132 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:7154 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:7170 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:7189 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:9149 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:9158 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:9167 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:9298 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:9429 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:9560 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:9691 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:9951 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:10082 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache.v:10341 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

106. Executing Verilog-2005 frontend: ./verilog/mkdcache_data.v
Parsing Verilog input from `./verilog/mkdcache_data.v' to AST representation.
Generating RTLIL representation for module `\mkdcache_data'.
Successfully finished Verilog frontend.

107. Executing Verilog-2005 frontend: ./verilog/mkdcache_fb_v2.v
Parsing Verilog input from `./verilog/mkdcache_fb_v2.v' to AST representation.
Generating RTLIL representation for module `\mkdcache_fb_v2'.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:955 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1627 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1651 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1675 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1699 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1723 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1747 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1771 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1795 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1819 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1843 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1867 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1891 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1915 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1939 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1963 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:1987 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2011 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2035 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2059 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2083 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2107 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2131 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2155 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2179 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2203 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2227 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2251 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2275 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2299 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2323 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2347 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2371 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2395 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2419 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2443 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2467 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2491 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2515 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2539 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2563 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2587 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2611 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2635 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2659 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2683 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2707 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2731 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2755 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2779 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2803 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2827 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2851 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2875 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2899 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2923 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2947 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2971 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:2995 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3019 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3043 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3067 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3091 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3115 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3139 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3291 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3308 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3325 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3342 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3359 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3376 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3393 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3410 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3590 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3608 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3626 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3644 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3662 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3680 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3698 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3716 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3734 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3752 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3769 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3787 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3805 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3823 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3841 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3859 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3877 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3895 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3913 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3931 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3965 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:3999 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:4033 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:4067 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:4101 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:4135 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:4169 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_fb_v2.v:4203 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

108. Executing Verilog-2005 frontend: ./verilog/mkdcache_tag.v
Parsing Verilog input from `./verilog/mkdcache_tag.v' to AST representation.
Generating RTLIL representation for module `\mkdcache_tag'.
Note: Assuming pure combinatorial block at ./verilog/mkdcache_tag.v:280 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

109. Executing Verilog-2005 frontend: ./verilog/mkdmem.v
Parsing Verilog input from `./verilog/mkdmem.v' to AST representation.
Generating RTLIL representation for module `\mkdmem'.
Successfully finished Verilog frontend.

110. Executing Verilog-2005 frontend: ./verilog/mkfa_dtlb.v
Parsing Verilog input from `./verilog/mkfa_dtlb.v' to AST representation.
Generating RTLIL representation for module `\mkfa_dtlb'.
Successfully finished Verilog frontend.

111. Executing Verilog-2005 frontend: ./verilog/mkfa_itlb.v
Parsing Verilog input from `./verilog/mkfa_itlb.v' to AST representation.
Generating RTLIL representation for module `\mkfa_itlb'.
Successfully finished Verilog frontend.

112. Executing Verilog-2005 frontend: ./verilog/mkfpu.v
Parsing Verilog input from `./verilog/mkfpu.v' to AST representation.
Generating RTLIL representation for module `\mkfpu'.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2122 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2172 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2217 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2255 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2478 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2519 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2594 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2645 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2751 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2792 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2867 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:2918 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9725 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9743 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9762 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9784 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9802 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9821 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9843 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9865 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9879 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9903 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9927 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9944 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9974 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:9996 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:10013 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:10027 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkfpu.v:10057 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

113. Executing Verilog-2005 frontend: ./verilog/mkfwding.v
Parsing Verilog input from `./verilog/mkfwding.v' to AST representation.
Generating RTLIL representation for module `\mkfwding'.
Successfully finished Verilog frontend.

114. Executing Verilog-2005 frontend: ./verilog/mkicache.v
Parsing Verilog input from `./verilog/mkicache.v' to AST representation.
Generating RTLIL representation for module `\mkicache'.
Note: Assuming pure combinatorial block at ./verilog/mkicache.v:3449 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache.v:3466 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache.v:3513 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache.v:3530 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache.v:4207 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache.v:4338 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache.v:4598 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

115. Executing Verilog-2005 frontend: ./verilog/mkicache_data.v
Parsing Verilog input from `./verilog/mkicache_data.v' to AST representation.
Generating RTLIL representation for module `\mkicache_data'.
Successfully finished Verilog frontend.

116. Executing Verilog-2005 frontend: ./verilog/mkicache_fb_v2.v
Parsing Verilog input from `./verilog/mkicache_fb_v2.v' to AST representation.
Generating RTLIL representation for module `\mkicache_fb_v2'.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:789 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:1856 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:1873 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:1890 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:1907 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2207 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2217 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2228 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2239 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2250 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2261 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2272 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2282 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2292 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2302 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2312 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2322 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2332 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2342 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2352 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2362 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2371 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2381 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2392 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2427 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2462 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkicache_fb_v2.v:2497 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

117. Executing Verilog-2005 frontend: ./verilog/mkicache_tag.v
Parsing Verilog input from `./verilog/mkicache_tag.v' to AST representation.
Generating RTLIL representation for module `\mkicache_tag'.
Note: Assuming pure combinatorial block at ./verilog/mkicache_tag.v:280 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

118. Executing Verilog-2005 frontend: ./verilog/mkimem.v
Parsing Verilog input from `./verilog/mkimem.v' to AST representation.
Generating RTLIL representation for module `\mkimem'.
Successfully finished Verilog frontend.

119. Executing Verilog-2005 frontend: ./verilog/mkinstance.v
Parsing Verilog input from `./verilog/mkinstance.v' to AST representation.
Generating RTLIL representation for module `\mkinstance'.
Note: Assuming pure combinatorial block at ./verilog/mkinstance.v:506 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkinstance.v:528 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkinstance.v:801 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkinstance.v:809 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkinstance.v:817 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

120. Executing Verilog-2005 frontend: ./verilog/mkmbox.v
Parsing Verilog input from `./verilog/mkmbox.v' to AST representation.
Generating RTLIL representation for module `\mkmbox'.
Successfully finished Verilog frontend.

121. Executing Verilog-2005 frontend: ./verilog/mkmulticycle_alu.v
Parsing Verilog input from `./verilog/mkmulticycle_alu.v' to AST representation.
Generating RTLIL representation for module `\mkmulticycle_alu'.
Successfully finished Verilog frontend.

122. Executing Verilog-2005 frontend: ./verilog/mkregisterfile.v
Parsing Verilog input from `./verilog/mkregisterfile.v' to AST representation.
Generating RTLIL representation for module `\mkregisterfile'.
Successfully finished Verilog frontend.

123. Executing Verilog-2005 frontend: ./verilog/mkrestoring_div.v
Parsing Verilog input from `./verilog/mkrestoring_div.v' to AST representation.
Generating RTLIL representation for module `\mkrestoring_div'.
Successfully finished Verilog frontend.

124. Executing Verilog-2005 frontend: ./verilog/mkriscv.v
Parsing Verilog input from `./verilog/mkriscv.v' to AST representation.
Generating RTLIL representation for module `\mkriscv'.
Note: Assuming pure combinatorial block at ./verilog/mkriscv.v:2133 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

125. Executing Verilog-2005 frontend: ./verilog/mksign_dump.v
Parsing Verilog input from `./verilog/mksign_dump.v' to AST representation.
Generating RTLIL representation for module `\mksign_dump'.
./verilog/mksign_dump.v:871: Warning: Identifier `\TASK_fopen___d3' is implicitly declared.
Note: Assuming pure combinatorial block at ./verilog/mksign_dump.v:1012 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

126. Executing Verilog-2005 frontend: ./verilog/mkstage0.v
Parsing Verilog input from `./verilog/mkstage0.v' to AST representation.
Generating RTLIL representation for module `\mkstage0'.
Successfully finished Verilog frontend.

127. Executing Verilog-2005 frontend: ./verilog/mkstage1.v
Parsing Verilog input from `./verilog/mkstage1.v' to AST representation.
Generating RTLIL representation for module `\mkstage1'.
Successfully finished Verilog frontend.

128. Executing Verilog-2005 frontend: ./verilog/mkstage2.v
Parsing Verilog input from `./verilog/mkstage2.v' to AST representation.
Generating RTLIL representation for module `\mkstage2'.
Note: Assuming pure combinatorial block at ./verilog/mkstage2.v:998 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstage2.v:1005 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

129. Executing Verilog-2005 frontend: ./verilog/mkstage3.v
Parsing Verilog input from `./verilog/mkstage3.v' to AST representation.
Generating RTLIL representation for module `\mkstage3'.
Note: Assuming pure combinatorial block at ./verilog/mkstage3.v:2329 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstage3.v:2340 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstage3.v:2351 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

130. Executing Verilog-2005 frontend: ./verilog/mkstage4.v
Parsing Verilog input from `./verilog/mkstage4.v' to AST representation.
Generating RTLIL representation for module `\mkstage4'.
Note: Assuming pure combinatorial block at ./verilog/mkstage4.v:681 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

131. Executing Verilog-2005 frontend: ./verilog/mkstage5.v
Parsing Verilog input from `./verilog/mkstage5.v' to AST representation.
Generating RTLIL representation for module `\mkstage5'.
Note: Assuming pure combinatorial block at ./verilog/mkstage5.v:1275 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

132. Executing Verilog-2005 frontend: ./verilog/mkstorebuffer.v
Parsing Verilog input from `./verilog/mkstorebuffer.v' to AST representation.
Generating RTLIL representation for module `\mkstorebuffer'.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:333 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:490 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:499 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:506 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:513 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:520 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:527 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:534 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:541 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:548 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:557 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:564 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:610 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:623 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:636 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:647 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:658 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:669 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:680 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:691 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:702 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/mkstorebuffer.v:713 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

133. Executing Verilog-2005 frontend: ./verilog/module_address_valid.v
Parsing Verilog input from `./verilog/module_address_valid.v' to AST representation.
Generating RTLIL representation for module `\module_address_valid'.
Note: Assuming pure combinatorial block at ./verilog/module_address_valid.v:53 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_address_valid.v:85 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_address_valid.v:103 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_address_valid.v:120 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_address_valid.v:147 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_address_valid.v:160 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_address_valid.v:175 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

134. Executing Verilog-2005 frontend: ./verilog/module_chk_interrupt.v
Parsing Verilog input from `./verilog/module_chk_interrupt.v' to AST representation.
Generating RTLIL representation for module `\module_chk_interrupt'.
Successfully finished Verilog frontend.

135. Executing Verilog-2005 frontend: ./verilog/module_decode_word32.v
Parsing Verilog input from `./verilog/module_decode_word32.v' to AST representation.
Generating RTLIL representation for module `\module_decode_word32'.
Successfully finished Verilog frontend.

136. Executing Verilog-2005 frontend: ./verilog/module_decoder_func_32.v
Parsing Verilog input from `./verilog/module_decoder_func_32.v' to AST representation.
Generating RTLIL representation for module `\module_decoder_func_32'.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:526 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:534 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:542 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:553 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:587 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:607 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:645 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:678 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:711 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:729 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:746 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:767 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:801 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:821 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:839 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:850 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:896 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:913 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:948 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:969 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:978 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:987 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:999 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1010 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1022 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1035 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1053 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1061 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1103 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1141 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1155 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1175 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1196 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_decoder_func_32.v:1210 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

137. Executing Verilog-2005 frontend: ./verilog/module_fn_alu.v
Parsing Verilog input from `./verilog/module_fn_alu.v' to AST representation.
Generating RTLIL representation for module `\module_fn_alu'.
Note: Assuming pure combinatorial block at ./verilog/module_fn_alu.v:232 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_fn_alu.v:303 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_fn_alu.v:317 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./verilog/module_fn_alu.v:341 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

138. Executing Verilog-2005 frontend: ./verilog/module_fn_csr_op.v
Parsing Verilog input from `./verilog/module_fn_csr_op.v' to AST representation.
Generating RTLIL representation for module `\module_fn_csr_op'.
Note: Assuming pure combinatorial block at ./verilog/module_fn_csr_op.v:49 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

139. Executing Verilog-2005 frontend: ./verilog/module_fn_decompress.v
Parsing Verilog input from `./verilog/module_fn_decompress.v' to AST representation.
Generating RTLIL representation for module `\module_fn_decompress'.
Successfully finished Verilog frontend.

140. Executing Verilog-2005 frontend: ./verilog/module_fn_pmp_lookup.v
Parsing Verilog input from `./verilog/module_fn_pmp_lookup.v' to AST representation.
Generating RTLIL representation for module `\module_fn_pmp_lookup'.
Note: Assuming pure combinatorial block at ./verilog/module_fn_pmp_lookup.v:218 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

141. Executing Verilog-2005 frontend: ./verilog/module_fn_single_div.v
Parsing Verilog input from `./verilog/module_fn_single_div.v' to AST representation.
Generating RTLIL representation for module `\module_fn_single_div'.
Successfully finished Verilog frontend.

142. Executing Verilog-2005 frontend: ./verilog/module_hasCSRPermission.v
Parsing Verilog input from `./verilog/module_hasCSRPermission.v' to AST representation.
Generating RTLIL representation for module `\module_hasCSRPermission'.
Successfully finished Verilog frontend.

143. Executing Verilog-2005 frontend: ./verilog/module_valid_csr_access.v
Parsing Verilog input from `./verilog/module_valid_csr_access.v' to AST representation.
Generating RTLIL representation for module `\module_valid_csr_access'.
Successfully finished Verilog frontend.

144. Executing Verilog-2005 frontend: ./verilog/signedmul.v
Parsing Verilog input from `./verilog/signedmul.v' to AST representation.
Generating RTLIL representation for module `\signedmul'.
Successfully finished Verilog frontend.

145. Executing PREP pass.

145.1. Executing HIERARCHY pass (managing design hierarchy).

145.1.1. Analyzing design hierarchy..
Top module:  \mkrestoring_div
Used module:     \module_fn_single_div

145.1.2. Analyzing design hierarchy..
Top module:  \mkrestoring_div
Used module:     \module_fn_single_div
Removing unused module `\signedmul'.
Removing unused module `\module_valid_csr_access'.
Removing unused module `\module_hasCSRPermission'.
Removing unused module `\module_fn_pmp_lookup'.
Removing unused module `\module_fn_decompress'.
Removing unused module `\module_fn_csr_op'.
Removing unused module `\module_fn_alu'.
Removing unused module `\module_decoder_func_32'.
Removing unused module `\module_decode_word32'.
Removing unused module `\module_chk_interrupt'.
Removing unused module `\module_address_valid'.
Removing unused module `\mkstorebuffer'.
Removing unused module `\mkstage5'.
Removing unused module `\mkstage4'.
Removing unused module `\mkstage3'.
Removing unused module `\mkstage2'.
Removing unused module `\mkstage1'.
Removing unused module `\mkstage0'.
Removing unused module `\mksign_dump'.
Removing unused module `\mkriscv'.
Removing unused module `\mkregisterfile'.
Removing unused module `\mkmulticycle_alu'.
Removing unused module `\mkmbox'.
Removing unused module `\mkinstance'.
Removing unused module `\mkimem'.
Removing unused module `\mkicache_tag'.
Removing unused module `\mkicache_fb_v2'.
Removing unused module `\mkicache_data'.
Removing unused module `\mkicache'.
Removing unused module `\mkfwding'.
Removing unused module `\mkfpu'.
Removing unused module `\mkfa_itlb'.
Removing unused module `\mkfa_dtlb'.
Removing unused module `\mkdmem'.
Removing unused module `\mkdcache_tag'.
Removing unused module `\mkdcache_fb_v2'.
Removing unused module `\mkdcache_data'.
Removing unused module `\mkdcache'.
Removing unused module `\mkcsr'.
Removing unused module `\mkcombo_mul'.
Removing unused module `\mkccore_axi4'.
Removing unused module `\mkbpu'.
Removing unused module `\mk_csr_grp7'.
Removing unused module `\mk_csr_grp6'.
Removing unused module `\mk_csr_grp5'.
Removing unused module `\mk_csr_grp4'.
Removing unused module `\mk_csr_grp3'.
Removing unused module `\mk_csr_grp2'.
Removing unused module `\mk_csr_grp1'.
Removing unused module `\mk_csr_daisy'.
Removing unused module `\bram_2rw'.
Removing unused module `\bram_1rw'.
Removing unused module `\bram_1r1w'.
Removing unused module `\UngatedClockSelect'.
Removing unused module `\UngatedClockMux'.
Removing unused module `\TriState'.
Removing unused module `\SyncWire'.
Removing unused module `\SyncResetA'.
Removing unused module `\SyncReset0'.
Removing unused module `\SyncReset'.
Removing unused module `\SyncRegister'.
Removing unused module `\SyncPulse'.
Removing unused module `\SyncHandshake'.
Removing unused module `\SyncFIFOLevel0'.
Removing unused module `\SyncFIFOLevel'.
Removing unused module `\SyncFIFO10'.
Removing unused module `\SyncFIFO1'.
Removing unused module `\SyncFIFO0'.
Removing unused module `\SyncFIFO'.
Removing unused module `\SyncBit15'.
Removing unused module `\SyncBit1'.
Removing unused module `\SyncBit05'.
Removing unused module `\SyncBit'.
Removing unused module `\SizedFIFOL0'.
Removing unused module `\SizedFIFOL'.
Removing unused module `\SizedFIFO0'.
Removing unused module `\SizedFIFO'.
Removing unused module `\ScanIn'.
Removing unused module `\SampleReg'.
Removing unused module `\RevertReg'.
Removing unused module `\ResetToBool'.
Removing unused module `\ResetMux'.
Removing unused module `\ResetInverter'.
Removing unused module `\ResetEither'.
Removing unused module `\RegUN'.
Removing unused module `\RegTwoUN'.
Removing unused module `\RegTwoN'.
Removing unused module `\RegTwoA'.
Removing unused module `\RegN'.
Removing unused module `\RegFile'.
Removing unused module `\RegAligned'.
Removing unused module `\RegA'.
Removing unused module `\RWire0'.
Removing unused module `\RWire'.
Removing unused module `\ProbeWire'.
Removing unused module `\ProbeValue'.
Removing unused module `\ProbeTrigger'.
Removing unused module `\ProbeMux'.
Removing unused module `\ProbeCapture'.
Removing unused module `\MakeResetA'.
Removing unused module `\MakeReset0'.
Removing unused module `\MakeReset'.
Removing unused module `\MakeClock'.
Removing unused module `\LatchCrossingReg'.
Removing unused module `\GatedClockInverter'.
Removing unused module `\GatedClockDiv'.
Removing unused module `\GatedClock'.
Removing unused module `\Fork'.
Removing unused module `\FIFOL20'.
Removing unused module `\FIFOL2'.
Removing unused module `\FIFOL10'.
Removing unused module `\FIFOL1'.
Removing unused module `\FIFO20'.
Removing unused module `\FIFO2'.
Removing unused module `\FIFO10'.
Removing unused module `\FIFO1'.
Removing unused module `\DualPortRam'.
Removing unused module `\CrossingRegUN'.
Removing unused module `\CrossingRegN'.
Removing unused module `\CrossingRegA'.
Removing unused module `\CrossingBypassWire'.
Removing unused module `\Counter'.
Removing unused module `\ConstrainedRandom'.
Removing unused module `\ConfigRegUN'.
Removing unused module `\ConfigRegN'.
Removing unused module `\ConfigRegA'.
Removing unused module `\ClockSelect'.
Removing unused module `\ClockMux'.
Removing unused module `\ClockInverter'.
Removing unused module `\ClockGen'.
Removing unused module `\ClockDiv'.
Removing unused module `\CRegUN5'.
Removing unused module `\CRegN5'.
Removing unused module `\CRegA5'.
Removing unused module `\BypassWire'.
Removing unused module `\BypassCrossingWire'.
Removing unused module `\BRAM2'.
Removing unused module `\BRAM1BE'.
Removing unused module `\BRAM1'.
Removed 139 unused modules.

145.2. Executing PROC pass (convert processes to netlists).

145.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

145.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./verilog/mkrestoring_div.v:322$29054 in module mkrestoring_div.
Removed a total of 0 dead cases.

145.2.3. Executing PROC_INIT pass (extract init attributes).

145.2.4. Executing PROC_ARST pass (detect async resets in processes).

145.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
     1/11: $0\rg_valid[0:0]
     2/11: $0\rg_upperbits[0:0]
     3/11: $0\rg_sign_op1[0:0]
     4/11: $0\rg_op2[63:0]
     5/11: $0\rg_in1[63:0]
     6/11: $0\rg_count[5:0]
     7/11: $0\rg_complement[0:0]
     8/11: $0\quotient_remainder[0:0]
     9/11: $0\partial[128:0]
    10/11: $0\rg_result[63:0]
    11/11: $0\rg_word[0:0]

145.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

145.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mkrestoring_div.\rg_word' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32411' with positive edge clock.
Creating register for signal `\mkrestoring_div.\rg_result' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32412' with positive edge clock.
Creating register for signal `\mkrestoring_div.\partial' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32413' with positive edge clock.
Creating register for signal `\mkrestoring_div.\quotient_remainder' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32414' with positive edge clock.
Creating register for signal `\mkrestoring_div.\rg_complement' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32415' with positive edge clock.
Creating register for signal `\mkrestoring_div.\rg_count' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32416' with positive edge clock.
Creating register for signal `\mkrestoring_div.\rg_in1' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32417' with positive edge clock.
Creating register for signal `\mkrestoring_div.\rg_op2' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32418' with positive edge clock.
Creating register for signal `\mkrestoring_div.\rg_sign_op1' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32419' with positive edge clock.
Creating register for signal `\mkrestoring_div.\rg_upperbits' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32420' with positive edge clock.
Creating register for signal `\mkrestoring_div.\rg_valid' using process `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
  created $dff cell `$procdff$32421' with positive edge clock.

145.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 12 empty switches in `\mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
Removing empty process `mkrestoring_div.$proc$./verilog/mkrestoring_div.v:322$29054'.
Cleaned up 12 empty switches.

145.3. Executing FLATTEN pass (flatten design).
Using template module_fn_single_div for cells of type module_fn_single_div.
<suppressed ~1 debug messages>
No more expansions possible.
Deleting now unused module module_fn_single_div.

145.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkrestoring_div.
<suppressed ~17 debug messages>

145.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkrestoring_div..
Removed 1 unused cells and 69 unused wires.
<suppressed ~2 debug messages>

145.6. Executing CHECK pass (checking for obvious problems).
checking module mkrestoring_div..
found and reported 0 problems.

145.7. Executing OPT pass (performing simple optimizations).

145.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkrestoring_div.

145.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkrestoring_div'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

145.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkrestoring_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

145.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkrestoring_div.
Performed a total of 0 changes.

145.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkrestoring_div'.
Removed a total of 0 cells.

145.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

145.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkrestoring_div..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

145.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkrestoring_div.

145.7.9. Finished OPT passes. (There is nothing left to do.)

145.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 63 bits (of 64) from port B of cell mkrestoring_div.$techmap\instance_fn_single_div_0.$add$./verilog/module_fn_single_div.v:85$32337 ($add).
Removed top 1 bits (of 65) from mux cell mkrestoring_div.$techmap\instance_fn_single_div_0.$ternary$./verilog/module_fn_single_div.v:66$32331 ($mux).
Removed top 63 bits (of 64) from port B of cell mkrestoring_div.$add$./verilog/mkrestoring_div.v:236$29024 ($add).
Removed top 63 bits (of 64) from port B of cell mkrestoring_div.$add$./verilog/mkrestoring_div.v:306$29045 ($add).
Removed top 63 bits (of 64) from port B of cell mkrestoring_div.$add$./verilog/mkrestoring_div.v:295$29041 ($add).
Removed top 5 bits (of 6) from port B of cell mkrestoring_div.$add$./verilog/mkrestoring_div.v:318$29053 ($add).
Removed top 1 bits (of 65) from port Y of cell mkrestoring_div.$techmap\instance_fn_single_div_0.$add$./verilog/module_fn_single_div.v:84$32335 ($add).
Removed top 1 bits (of 65) from port A of cell mkrestoring_div.$techmap\instance_fn_single_div_0.$add$./verilog/module_fn_single_div.v:84$32335 ($add).
Removed top 1 bits (of 65) from port B of cell mkrestoring_div.$techmap\instance_fn_single_div_0.$add$./verilog/module_fn_single_div.v:84$32335 ($add).
Removed top 1 bits (of 65) from wire mkrestoring_div.instance_fn_single_div_0.IF_fn_single_div_remainder_BITS_62_TO_0_CONCAT_ETC___d11.
Removed top 64 bits (of 65) from wire mkrestoring_div.instance_fn_single_div_0.remainder__h71.
Removed top 1 bits (of 65) from wire mkrestoring_div.instance_fn_single_div_0.sub__h84.

145.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

145.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkrestoring_div..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

145.11. Executing MEMORY_COLLECT pass (generating $mem cells).

145.12. Executing OPT pass (performing simple optimizations).

145.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkrestoring_div.

145.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkrestoring_div'.
Removed a total of 0 cells.

145.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

145.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkrestoring_div..

145.12.5. Finished fast OPT passes.

145.13. Printing statistics.

=== mkrestoring_div ===

   Number of wires:                129
   Number of wire bits:           4092
   Number of public wires:          90
   Number of public wire bits:    3157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 83
     $add                            7
     $dff                           11
     $eq                             4
     $logic_and                      7
     $logic_not                      6
     $logic_or                       3
     $lt                             2
     $mux                           37
     $not                            2
     $reduce_bool                    1
     $xor                            3

145.14. Executing CHECK pass (checking for obvious problems).
checking module mkrestoring_div..
found and reported 0 problems.

146. Executing Verilog-2005 frontend: synth_div.yv
Parsing Verilog input from `synth_div.yv' to AST representation.
Generating RTLIL representation for module `\mkrestoring_div'.
Generating RTLIL representation for module `\module_fn_single_div'.
Successfully finished Verilog frontend.

147. Executing Liberty frontend.
Ignoring cell sky130_fd_sc_hvl__dlclkp_1 with missing function on output GCLK.
Ignoring cell sky130_fd_sc_hvl__sdlclkp_1 with missing function on output GCLK.
Imported 55 cell types from liberty file.

148. Executing PREP pass.

148.1. Executing HIERARCHY pass (managing design hierarchy).

148.1.1. Analyzing design hierarchy..
Top module:  \mkrestoring_div
Used module:     \module_fn_single_div
Used module:         \sky130_fd_sc_hvl__o22ai_1
Used module:         \sky130_fd_sc_hvl__a21oi_1
Used module:         \sky130_fd_sc_hvl__o21ai_1
Used module:         \sky130_fd_sc_hvl__mux2_1
Used module:         \sky130_fd_sc_hvl__nand2_1
Used module:         \sky130_fd_sc_hvl__o21a_1
Used module:         \sky130_fd_sc_hvl__inv_1
Used module:         \sky130_fd_sc_hvl__xor2_1
Used module:         \sky130_fd_sc_hvl__xnor2_1
Used module:         \sky130_fd_sc_hvl__or2_1
Used module:         \sky130_fd_sc_hvl__and2_1
Used module:         \sky130_fd_sc_hvl__nor2_1
Used module:         \sky130_fd_sc_hvl__a21o_1
Used module:         \sky130_fd_sc_hvl__a22o_1
Used module:         \sky130_fd_sc_hvl__nor3_1
Used module:         \sky130_fd_sc_hvl__and3_1
Used module:         \sky130_fd_sc_hvl__or3_1
Used module:         \sky130_fd_sc_hvl__nand3_1
Used module:         \sky130_fd_sc_hvl__a22oi_1
Used module:         \sky130_fd_sc_hvl__o22a_1
Used module:     \sky130_fd_sc_hvl__dfxtp_1

148.1.2. Analyzing design hierarchy..
Top module:  \mkrestoring_div
Used module:     \module_fn_single_div
Used module:         \sky130_fd_sc_hvl__o22ai_1
Used module:         \sky130_fd_sc_hvl__a21oi_1
Used module:         \sky130_fd_sc_hvl__o21ai_1
Used module:         \sky130_fd_sc_hvl__mux2_1
Used module:         \sky130_fd_sc_hvl__nand2_1
Used module:         \sky130_fd_sc_hvl__o21a_1
Used module:         \sky130_fd_sc_hvl__inv_1
Used module:         \sky130_fd_sc_hvl__xor2_1
Used module:         \sky130_fd_sc_hvl__xnor2_1
Used module:         \sky130_fd_sc_hvl__or2_1
Used module:         \sky130_fd_sc_hvl__and2_1
Used module:         \sky130_fd_sc_hvl__nor2_1
Used module:         \sky130_fd_sc_hvl__a21o_1
Used module:         \sky130_fd_sc_hvl__a22o_1
Used module:         \sky130_fd_sc_hvl__nor3_1
Used module:         \sky130_fd_sc_hvl__and3_1
Used module:         \sky130_fd_sc_hvl__or3_1
Used module:         \sky130_fd_sc_hvl__nand3_1
Used module:         \sky130_fd_sc_hvl__a22oi_1
Used module:         \sky130_fd_sc_hvl__o22a_1
Used module:     \sky130_fd_sc_hvl__dfxtp_1
Removing unused module `\sky130_fd_sc_hvl__sdlxtp_1'.
Removing unused module `\sky130_fd_sc_hvl__sdfxtp_1'.
Removing unused module `\sky130_fd_sc_hvl__sdfxbp_1'.
Removing unused module `\sky130_fd_sc_hvl__sdfstp_1'.
Removing unused module `\sky130_fd_sc_hvl__sdfsbp_1'.
Removing unused module `\sky130_fd_sc_hvl__sdfrtp_1'.
Removing unused module `\sky130_fd_sc_hvl__sdfrbp_1'.
Removing unused module `\sky130_fd_sc_hvl__schmittbuf_1'.
Removing unused module `\sky130_fd_sc_hvl__probec_p_8'.
Removing unused module `\sky130_fd_sc_hvl__probe_p_8'.
Removing unused module `\sky130_fd_sc_hvl__mux4_1'.
Removing unused module `\sky130_fd_sc_hvl__inv_8'.
Removing unused module `\sky130_fd_sc_hvl__inv_4'.
Removing unused module `\sky130_fd_sc_hvl__inv_2'.
Removing unused module `\sky130_fd_sc_hvl__inv_16'.
Removing unused module `\sky130_fd_sc_hvl__einvp_1'.
Removing unused module `\sky130_fd_sc_hvl__einvn_1'.
Removing unused module `\sky130_fd_sc_hvl__dlxtp_1'.
Removing unused module `\sky130_fd_sc_hvl__dlrtp_1'.
Removing unused module `\sky130_fd_sc_hvl__diode_2'.
Removing unused module `\sky130_fd_sc_hvl__dfxbp_1'.
Removing unused module `\sky130_fd_sc_hvl__dfstp_1'.
Removing unused module `\sky130_fd_sc_hvl__dfsbp_1'.
Removing unused module `\sky130_fd_sc_hvl__dfrtp_1'.
Removing unused module `\sky130_fd_sc_hvl__dfrbp_1'.
Removing unused module `\sky130_fd_sc_hvl__decap_8'.
Removing unused module `\sky130_fd_sc_hvl__decap_4'.
Removing unused module `\sky130_fd_sc_hvl__conb_1'.
Removing unused module `\sky130_fd_sc_hvl__buf_8'.
Removing unused module `\sky130_fd_sc_hvl__buf_4'.
Removing unused module `\sky130_fd_sc_hvl__buf_32'.
Removing unused module `\sky130_fd_sc_hvl__buf_2'.
Removing unused module `\sky130_fd_sc_hvl__buf_16'.
Removing unused module `\sky130_fd_sc_hvl__buf_1'.
Removed 34 unused modules.

148.2. Executing PROC pass (convert processes to netlists).

148.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

148.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

148.2.3. Executing PROC_INIT pass (extract init attributes).

148.2.4. Executing PROC_ARST pass (detect async resets in processes).

148.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

148.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

148.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

148.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

148.3. Executing FLATTEN pass (flatten design).
Using template sky130_fd_sc_hvl__inv_1 for cells of type sky130_fd_sc_hvl__inv_1.
Using template sky130_fd_sc_hvl__nand3_1 for cells of type sky130_fd_sc_hvl__nand3_1.
Using template sky130_fd_sc_hvl__nand2_1 for cells of type sky130_fd_sc_hvl__nand2_1.
Using template sky130_fd_sc_hvl__a21oi_1 for cells of type sky130_fd_sc_hvl__a21oi_1.
Using template sky130_fd_sc_hvl__xnor2_1 for cells of type sky130_fd_sc_hvl__xnor2_1.
Using template sky130_fd_sc_hvl__xor2_1 for cells of type sky130_fd_sc_hvl__xor2_1.
Using template sky130_fd_sc_hvl__nor2_1 for cells of type sky130_fd_sc_hvl__nor2_1.
Using template sky130_fd_sc_hvl__nor3_1 for cells of type sky130_fd_sc_hvl__nor3_1.
Using template sky130_fd_sc_hvl__dfxtp_1 for cells of type sky130_fd_sc_hvl__dfxtp_1.
Using template sky130_fd_sc_hvl__o21ai_1 for cells of type sky130_fd_sc_hvl__o21ai_1.
Using template sky130_fd_sc_hvl__a21o_1 for cells of type sky130_fd_sc_hvl__a21o_1.
Using template sky130_fd_sc_hvl__o21a_1 for cells of type sky130_fd_sc_hvl__o21a_1.
Using template sky130_fd_sc_hvl__or2_1 for cells of type sky130_fd_sc_hvl__or2_1.
Using template sky130_fd_sc_hvl__and2_1 for cells of type sky130_fd_sc_hvl__and2_1.
Using template sky130_fd_sc_hvl__or3_1 for cells of type sky130_fd_sc_hvl__or3_1.
Using template sky130_fd_sc_hvl__and3_1 for cells of type sky130_fd_sc_hvl__and3_1.
Using template sky130_fd_sc_hvl__a22oi_1 for cells of type sky130_fd_sc_hvl__a22oi_1.
Using template sky130_fd_sc_hvl__o22ai_1 for cells of type sky130_fd_sc_hvl__o22ai_1.
Using template sky130_fd_sc_hvl__a22o_1 for cells of type sky130_fd_sc_hvl__a22o_1.
Using template module_fn_single_div for cells of type module_fn_single_div.
Using template sky130_fd_sc_hvl__mux2_1 for cells of type sky130_fd_sc_hvl__mux2_1.
Using template sky130_fd_sc_hvl__o22a_1 for cells of type sky130_fd_sc_hvl__o22a_1.
<suppressed ~3534 debug messages>
No more expansions possible.
Deleting now unused module sky130_fd_sc_hvl__dfxtp_1.
Deleting now unused module sky130_fd_sc_hvl__nand3_1.
Deleting now unused module sky130_fd_sc_hvl__nand2_1.
Deleting now unused module sky130_fd_sc_hvl__xor2_1.
Deleting now unused module sky130_fd_sc_hvl__mux2_1.
Deleting now unused module sky130_fd_sc_hvl__xnor2_1.
Deleting now unused module sky130_fd_sc_hvl__or3_1.
Deleting now unused module sky130_fd_sc_hvl__or2_1.
Deleting now unused module sky130_fd_sc_hvl__o22ai_1.
Deleting now unused module sky130_fd_sc_hvl__inv_1.
Deleting now unused module sky130_fd_sc_hvl__o22a_1.
Deleting now unused module sky130_fd_sc_hvl__o21ai_1.
Deleting now unused module sky130_fd_sc_hvl__o21a_1.
Deleting now unused module sky130_fd_sc_hvl__nor3_1.
Deleting now unused module sky130_fd_sc_hvl__nor2_1.
Deleting now unused module sky130_fd_sc_hvl__and3_1.
Deleting now unused module sky130_fd_sc_hvl__and2_1.
Deleting now unused module sky130_fd_sc_hvl__a22oi_1.
Deleting now unused module sky130_fd_sc_hvl__a22o_1.
Deleting now unused module sky130_fd_sc_hvl__a21oi_1.
Deleting now unused module sky130_fd_sc_hvl__a21o_1.
Deleting now unused module module_fn_single_div.

148.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkrestoring_div.
<suppressed ~875 debug messages>

148.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkrestoring_div..
Removed 461 unused cells and 6208 unused wires.
<suppressed ~1016 debug messages>

148.6. Executing CHECK pass (checking for obvious problems).
checking module mkrestoring_div..
found and reported 0 problems.

148.7. Executing OPT pass (performing simple optimizations).

148.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkrestoring_div.

148.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkrestoring_div'.
<suppressed ~12486 debug messages>
Removed a total of 4162 cells.

148.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkrestoring_div..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

148.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkrestoring_div.
Performed a total of 0 changes.

148.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkrestoring_div'.
Removed a total of 0 cells.

148.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

148.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkrestoring_div..
Removed 0 unused cells and 4400 unused wires.
<suppressed ~239 debug messages>

148.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkrestoring_div.

148.7.9. Finished OPT passes. (There is nothing left to do.)

148.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 129) from wire mkrestoring_div.MUX_partial_write_1__VAL_1.
Removed top 1 bits (of 129) from wire mkrestoring_div.instance_fn_single_div_0.fn_single_div.
Removed top 1 bits (of 65) from wire mkrestoring_div.instance_fn_single_div_0.fn_single_div_remainder.
Removed top 1 bits (of 65) from wire mkrestoring_div.instance_fn_single_div_0.x__h24.
Removed top 1 bits (of 129) from wire mkrestoring_div.partial.
Removed top 1 bits (of 129) from wire mkrestoring_div.x__h1183.

148.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

148.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkrestoring_div..
Removed 0 unused cells and 8 unused wires.
<suppressed ~3 debug messages>

148.11. Executing MEMORY_COLLECT pass (generating $mem cells).

148.12. Executing OPT pass (performing simple optimizations).

148.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkrestoring_div.

148.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkrestoring_div'.
Removed a total of 0 cells.

148.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

148.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkrestoring_div..

148.12.5. Finished fast OPT passes.

148.13. Printing statistics.

=== mkrestoring_div ===

   Number of wires:              19894
   Number of wire bits:          22120
   Number of public wires:       13414
   Number of public wire bits:   15640
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               9926
     $_AND_                       3887
     $_DFF_P_                      332
     $_NOT_                       2868
     $_OR_                        2839

148.14. Executing CHECK pass (checking for obvious problems).
checking module mkrestoring_div..
found and reported 0 problems.

149. Executing EQUIV_MAKE pass (creating equiv checking module).
Presumably equivalent wires: CAN_FIRE_RL_rg_valid__dreg_update_gold (1'1), CAN_FIRE_RL_rg_valid__dreg_update_gate (1'1) -> CAN_FIRE_RL_rg_valid__dreg_update
Presumably equivalent wires: CAN_FIRE_ma_inputs_gold (1'1), CAN_FIRE_ma_inputs_gate (1'1) -> CAN_FIRE_ma_inputs
Presumably equivalent wires: CLK_gold (\CLK_gold), CLK_gate (\CLK_gate) -> CLK
Presumably equivalent wires: EN_ma_inputs_gold (\EN_ma_inputs_gold), EN_ma_inputs_gate (\EN_ma_inputs_gate) -> EN_ma_inputs
Presumably equivalent wires: IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gold (\IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gold), IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate ({ \IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [63:32] \ma_inputs_in1_gate [31:0] }) -> IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [32]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [33]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [34]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [35]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [36]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [37]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [38]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [39]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [40]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [41]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [42]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [43]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [44]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [45]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [46]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [47]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [48]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [49]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [50]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [51]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [52]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [53]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [54]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [55]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [56]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [57]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [58]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [59]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [60]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [61]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [62]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [63]: undriven on gate side.
Presumably equivalent wires: IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gold (\IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gold), IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate ({ \IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [63:32] \ma_inputs_in2_gate [31:0] }) -> IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [32]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [33]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [34]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [35]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [36]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [37]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [38]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [39]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [40]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [41]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [42]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [43]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [44]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [45]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [46]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [47]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [48]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [49]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [50]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [51]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [52]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [53]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [54]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [55]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [56]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [57]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [58]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [59]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [60]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [61]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [62]: undriven on gate side.
  Skipping signal bit IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [63]: undriven on gate side.
Presumably equivalent wires: MUX_partial_write_1__VAL_2_gold ({ 65'00000000000000000000000000000000000000000000000000000000000000000 \op1__h1383_gold }), MUX_partial_write_1__VAL_2_gate ({ 65'00000000000000000000000000000000000000000000000000000000000000000 \MUX_partial_write_1__VAL_2_gate [63:0] }) -> MUX_partial_write_1__VAL_2
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [0]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [1]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [2]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [3]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [4]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [5]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [6]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [7]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [8]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [9]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [10]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [11]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [12]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [13]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [14]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [15]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [16]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [17]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [18]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [19]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [20]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [21]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [22]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [23]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [24]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [25]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [26]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [27]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [28]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [29]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [30]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [31]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [32]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [33]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [34]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [35]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [36]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [37]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [38]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [39]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [40]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [41]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [42]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [43]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [44]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [45]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [46]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [47]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [48]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [49]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [50]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [51]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [52]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [53]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [54]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [55]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [56]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [57]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [58]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [59]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [60]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [61]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [62]: undriven on gate side.
  Skipping signal bit MUX_partial_write_1__VAL_2_gate [63]: undriven on gate side.
Presumably equivalent wires: RDY_mv_output_gold (1'1), RDY_mv_output_gate (1'1) -> RDY_mv_output
Presumably equivalent wires: RST_N_gold (\RST_N_gold), RST_N_gate (\RST_N_gate) -> RST_N
Presumably equivalent wires: WILL_FIRE_RL_rg_valid__dreg_update_gold (1'1), WILL_FIRE_RL_rg_valid__dreg_update_gate (1'1) -> WILL_FIRE_RL_rg_valid__dreg_update
Presumably equivalent wires: WILL_FIRE_ma_inputs_gold (\EN_ma_inputs_gold), WILL_FIRE_ma_inputs_gate (\EN_ma_inputs_gate) -> WILL_FIRE_ma_inputs
Presumably equivalent wires: _theResult___fst__h1524_gold (\_theResult___fst__h1524_gold), _theResult___fst__h1524_gate ({ \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \_theResult___fst__h1524_gate [63] \ma_inputs_in1_gate [31:0] }) -> _theResult___fst__h1524
  Skipping signal bit _theResult___fst__h1524_gate [32]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [33]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [34]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [35]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [36]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [37]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [38]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [39]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [40]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [41]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [42]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [43]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [44]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [45]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [46]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [47]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [48]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [49]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [50]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [51]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [52]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [53]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [54]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [55]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [56]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [57]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [58]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [59]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [60]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [61]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [62]: undriven on gate side.
  Skipping signal bit _theResult___fst__h1524_gate [63]: undriven on gate side.
Presumably equivalent wires: _theResult___snd__h1525_gold (\_theResult___snd__h1525_gold), _theResult___snd__h1525_gate ({ \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \_theResult___snd__h1525_gate [63] \ma_inputs_in2_gate [31:0] }) -> _theResult___snd__h1525
  Skipping signal bit _theResult___snd__h1525_gate [32]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [33]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [34]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [35]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [36]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [37]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [38]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [39]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [40]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [41]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [42]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [43]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [44]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [45]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [46]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [47]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [48]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [49]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [50]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [51]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [52]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [53]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [54]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [55]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [56]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [57]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [58]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [59]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [60]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [61]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [62]: undriven on gate side.
  Skipping signal bit _theResult___snd__h1525_gate [63]: undriven on gate side.
Presumably equivalent wires: instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gold ({ \instance_fn_single_div_0.x__h171_gold [63] \instance_fn_single_div_0.x__h171_gold }), instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate ({ \instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [64] \instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [64] \instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [62:0] }) -> instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [0]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [1]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [2]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [3]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [4]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [5]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [6]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [7]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [8]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [9]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [10]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [11]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [12]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [13]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [14]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [15]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [16]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [17]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [18]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [19]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [20]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [21]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [22]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [23]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [24]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [25]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [26]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [27]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [28]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [29]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [30]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [31]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [32]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [33]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [34]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [35]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [36]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [37]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [38]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [39]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [40]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [41]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [42]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [43]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [44]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [45]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [46]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [47]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [48]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [49]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [50]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [51]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [52]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [53]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [54]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [55]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [56]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [57]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [58]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [59]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [60]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [61]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [62]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [63]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [64]: undriven on gate side.
Presumably equivalent wires: instance_fn_single_div_0.fn_single_div_divisor_gold (\rg_op2_gold), instance_fn_single_div_0.fn_single_div_divisor_gate ({ \_3462_.IQ_gate \_3461_.IQ_gate \_3460_.IQ_gate \_3459_.IQ_gate \_3458_.IQ_gate \_3457_.IQ_gate \_3456_.IQ_gate \_3455_.IQ_gate \_3454_.IQ_gate \_3453_.IQ_gate \_3452_.IQ_gate \_3451_.IQ_gate \_3450_.IQ_gate \_3449_.IQ_gate \_3448_.IQ_gate \_3447_.IQ_gate \_3446_.IQ_gate \_3445_.IQ_gate \_3444_.IQ_gate \_3443_.IQ_gate \_3442_.IQ_gate \_3441_.IQ_gate \_3440_.IQ_gate \_3439_.IQ_gate \_3438_.IQ_gate \_3437_.IQ_gate \_3436_.IQ_gate \_3435_.IQ_gate \_3434_.IQ_gate \_3433_.IQ_gate \_3432_.IQ_gate \_3431_.IQ_gate \_3430_.IQ_gate \_3429_.IQ_gate \_3428_.IQ_gate \_3427_.IQ_gate \_3426_.IQ_gate \_3425_.IQ_gate \_3424_.IQ_gate \_3423_.IQ_gate \_3422_.IQ_gate \_3421_.IQ_gate \_3420_.IQ_gate \_3419_.IQ_gate \_3418_.IQ_gate \_3417_.IQ_gate \_3416_.IQ_gate \_3415_.IQ_gate \_3414_.IQ_gate \_3413_.IQ_gate \_3412_.IQ_gate \_3411_.IQ_gate \_3410_.IQ_gate \_3409_.IQ_gate \_3408_.IQ_gate \_3407_.IQ_gate \_3406_.IQ_gate \_3405_.IQ_gate \_3404_.IQ_gate \_3403_.IQ_gate \_3402_.IQ_gate \_3401_.IQ_gate \_3400_.IQ_gate \_3399_.IQ_gate }) -> instance_fn_single_div_0.fn_single_div_divisor
Presumably equivalent wires: instance_fn_single_div_0.fn_single_div_quotient_gold (\partial_gold [63:0]), instance_fn_single_div_0.fn_single_div_quotient_gate ({ \_3601_.IQ_gate \_3600_.IQ_gate \_3599_.IQ_gate \_3598_.IQ_gate \_3597_.IQ_gate \_3596_.IQ_gate \_3595_.IQ_gate \_3594_.IQ_gate \_3593_.IQ_gate \_3592_.IQ_gate \_3591_.IQ_gate \_3590_.IQ_gate \_3589_.IQ_gate \_3588_.IQ_gate \_3587_.IQ_gate \_3586_.IQ_gate \_3585_.IQ_gate \_3584_.IQ_gate \_3583_.IQ_gate \_3582_.IQ_gate \_3581_.IQ_gate \_3580_.IQ_gate \_3579_.IQ_gate \_3578_.IQ_gate \_3577_.IQ_gate \_3576_.IQ_gate \_3575_.IQ_gate \_3574_.IQ_gate \_3573_.IQ_gate \_3572_.IQ_gate \_3571_.IQ_gate \_3570_.IQ_gate \_3569_.IQ_gate \_3568_.IQ_gate \_3567_.IQ_gate \_3566_.IQ_gate \_3565_.IQ_gate \_3564_.IQ_gate \_3563_.IQ_gate \_3562_.IQ_gate \_3561_.IQ_gate \_3560_.IQ_gate \_3559_.IQ_gate \_3558_.IQ_gate \_3557_.IQ_gate \_3556_.IQ_gate \_3555_.IQ_gate \_3554_.IQ_gate \_3553_.IQ_gate \_3552_.IQ_gate \_3551_.IQ_gate \_3550_.IQ_gate \_3549_.IQ_gate \_3548_.IQ_gate \_3547_.IQ_gate \_3546_.IQ_gate \_3545_.IQ_gate \_3544_.IQ_gate \_3543_.IQ_gate \_3542_.IQ_gate \_3541_.IQ_gate \_3540_.IQ_gate \_3539_.IQ_gate \_3538_.IQ_gate }) -> instance_fn_single_div_0.fn_single_div_quotient
Presumably equivalent wires: instance_fn_single_div_0.remainder__h82_gold (\partial_gold [127:63]), instance_fn_single_div_0.remainder__h82_gate ({ \_3665_.IQ_gate \_3664_.IQ_gate \_3663_.IQ_gate \_3662_.IQ_gate \_3661_.IQ_gate \_3660_.IQ_gate \_3659_.IQ_gate \_3658_.IQ_gate \_3657_.IQ_gate \_3656_.IQ_gate \_3655_.IQ_gate \_3654_.IQ_gate \_3653_.IQ_gate \_3652_.IQ_gate \_3651_.IQ_gate \_3650_.IQ_gate \_3649_.IQ_gate \_3648_.IQ_gate \_3647_.IQ_gate \_3646_.IQ_gate \_3645_.IQ_gate \_3644_.IQ_gate \_3643_.IQ_gate \_3642_.IQ_gate \_3641_.IQ_gate \_3640_.IQ_gate \_3639_.IQ_gate \_3638_.IQ_gate \_3637_.IQ_gate \_3636_.IQ_gate \_3635_.IQ_gate \_3634_.IQ_gate \_3633_.IQ_gate \_3632_.IQ_gate \_3631_.IQ_gate \_3630_.IQ_gate \_3629_.IQ_gate \_3628_.IQ_gate \_3627_.IQ_gate \_3626_.IQ_gate \_3625_.IQ_gate \_3624_.IQ_gate \_3623_.IQ_gate \_3622_.IQ_gate \_3621_.IQ_gate \_3620_.IQ_gate \_3619_.IQ_gate \_3618_.IQ_gate \_3617_.IQ_gate \_3616_.IQ_gate \_3615_.IQ_gate \_3614_.IQ_gate \_3613_.IQ_gate \_3612_.IQ_gate \_3611_.IQ_gate \_3610_.IQ_gate \_3609_.IQ_gate \_3608_.IQ_gate \_3607_.IQ_gate \_3606_.IQ_gate \_3605_.IQ_gate \_3604_.IQ_gate \_3603_.IQ_gate \_3602_.IQ_gate \_3601_.IQ_gate }) -> instance_fn_single_div_0.remainder__h82
Presumably equivalent wires: instance_fn_single_div_0.x__h171_gold (\instance_fn_single_div_0.x__h171_gold), instance_fn_single_div_0.x__h171_gate ({ \instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [64] \instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [62:0] }) -> instance_fn_single_div_0.x__h171
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [0]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [1]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [2]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [3]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [4]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [5]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [6]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [7]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [8]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [9]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [10]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [11]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [12]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [13]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [14]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [15]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [16]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [17]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [18]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [19]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [20]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [21]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [22]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [23]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [24]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [25]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [26]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [27]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [28]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [29]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [30]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [31]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [32]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [33]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [34]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [35]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [36]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [37]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [38]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [39]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [40]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [41]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [42]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [43]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [44]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [45]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [46]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [47]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [48]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [49]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [50]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [51]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [52]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [53]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [54]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [55]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [56]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [57]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [58]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [59]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [60]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [61]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [62]: undriven on gate side.
  Skipping signal bit instance_fn_single_div_0.x__h171_gate [63]: undriven on gate side.
Presumably equivalent wires: instance_fn_single_div_0.x__h176_gold ({ \partial_gold [61:0] \MUX_partial_write_1__VAL_1_gold [1:0] }), instance_fn_single_div_0.x__h176_gate ({ \_3599_.IQ_gate \_3598_.IQ_gate \_3597_.IQ_gate \_3596_.IQ_gate \_3595_.IQ_gate \_3594_.IQ_gate \_3593_.IQ_gate \_3592_.IQ_gate \_3591_.IQ_gate \_3590_.IQ_gate \_3589_.IQ_gate \_3588_.IQ_gate \_3587_.IQ_gate \_3586_.IQ_gate \_3585_.IQ_gate \_3584_.IQ_gate \_3583_.IQ_gate \_3582_.IQ_gate \_3581_.IQ_gate \_3580_.IQ_gate \_3579_.IQ_gate \_3578_.IQ_gate \_3577_.IQ_gate \_3576_.IQ_gate \_3575_.IQ_gate \_3574_.IQ_gate \_3573_.IQ_gate \_3572_.IQ_gate \_3571_.IQ_gate \_3570_.IQ_gate \_3569_.IQ_gate \_3568_.IQ_gate \_3567_.IQ_gate \_3566_.IQ_gate \_3565_.IQ_gate \_3564_.IQ_gate \_3563_.IQ_gate \_3562_.IQ_gate \_3561_.IQ_gate \_3560_.IQ_gate \_3559_.IQ_gate \_3558_.IQ_gate \_3557_.IQ_gate \_3556_.IQ_gate \_3555_.IQ_gate \_3554_.IQ_gate \_3553_.IQ_gate \_3552_.IQ_gate \_3551_.IQ_gate \_3550_.IQ_gate \_3549_.IQ_gate \_3548_.IQ_gate \_3547_.IQ_gate \_3546_.IQ_gate \_3545_.IQ_gate \_3544_.IQ_gate \_3543_.IQ_gate \_3542_.IQ_gate \_3541_.IQ_gate \_3540_.IQ_gate \_3539_.IQ_gate \_3538_.IQ_gate \_2806_.A_gate \_2802_.A_gate }) -> instance_fn_single_div_0.x__h176
Presumably equivalent wires: ma_inputs_funct3_gold (\ma_inputs_funct3_gold), ma_inputs_funct3_gate (\ma_inputs_funct3_gate) -> ma_inputs_funct3
Presumably equivalent wires: ma_inputs_in1_gold (\ma_inputs_in1_gold), ma_inputs_in1_gate (\ma_inputs_in1_gate) -> ma_inputs_in1
Presumably equivalent wires: ma_inputs_in1_BITS_31_TO_0__q1_gold (\ma_inputs_in1_gold [31:0]), ma_inputs_in1_BITS_31_TO_0__q1_gate (\ma_inputs_in1_gate [31:0]) -> ma_inputs_in1_BITS_31_TO_0__q1
Presumably equivalent wires: ma_inputs_in2_gold (\ma_inputs_in2_gold), ma_inputs_in2_gate (\ma_inputs_in2_gate) -> ma_inputs_in2
Presumably equivalent wires: ma_inputs_in2_BITS_31_TO_0__q2_gold (\ma_inputs_in2_gold [31:0]), ma_inputs_in2_BITS_31_TO_0__q2_gate (\ma_inputs_in2_gate [31:0]) -> ma_inputs_in2_BITS_31_TO_0__q2
Presumably equivalent wires: ma_inputs_word32_gold (\ma_inputs_word32_gold), ma_inputs_word32_gate (\ma_inputs_word32_gate) -> ma_inputs_word32
Presumably equivalent wires: mv_output_gold ({ \rg_result_gold \rg_valid_gold 5'00000 }), mv_output_gate ({ \_3730_.IQ_gate \_3729_.IQ_gate \_3728_.IQ_gate \_3727_.IQ_gate \_3726_.IQ_gate \_3725_.IQ_gate \_3724_.IQ_gate \_3723_.IQ_gate \_3722_.IQ_gate \_3721_.IQ_gate \_3720_.IQ_gate \_3719_.IQ_gate \_3718_.IQ_gate \_3717_.IQ_gate \_3716_.IQ_gate \_3715_.IQ_gate \_3714_.IQ_gate \_3713_.IQ_gate \_3712_.IQ_gate \_3711_.IQ_gate \_3710_.IQ_gate \_3709_.IQ_gate \_3708_.IQ_gate \_3707_.IQ_gate \_3706_.IQ_gate \_3705_.IQ_gate \_3704_.IQ_gate \_3703_.IQ_gate \_3702_.IQ_gate \_3701_.IQ_gate \_3700_.IQ_gate \_3699_.IQ_gate \_3698_.IQ_gate \_3697_.IQ_gate \_3696_.IQ_gate \_3695_.IQ_gate \_3694_.IQ_gate \_3693_.IQ_gate \_3692_.IQ_gate \_3691_.IQ_gate \_3690_.IQ_gate \_3689_.IQ_gate \_3688_.IQ_gate \_3687_.IQ_gate \_3686_.IQ_gate \_3685_.IQ_gate \_3684_.IQ_gate \_3683_.IQ_gate \_3682_.IQ_gate \_3681_.IQ_gate \_3680_.IQ_gate \_3679_.IQ_gate \_3678_.IQ_gate \_3677_.IQ_gate \_3676_.IQ_gate \_3675_.IQ_gate \_3674_.IQ_gate \_3673_.IQ_gate \_3672_.IQ_gate \_3671_.IQ_gate \_3670_.IQ_gate \_3669_.IQ_gate \_3668_.IQ_gate \_3667_.IQ_gate \_3463_.IQ_gate 5'00000 }) -> mv_output
Presumably equivalent wires: op1__h1383_gold (\op1__h1383_gold), op1__h1383_gate (\MUX_partial_write_1__VAL_2_gate [63:0]) -> op1__h1383
  Skipping signal bit op1__h1383_gate [0]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [1]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [2]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [3]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [4]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [5]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [6]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [7]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [8]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [9]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [10]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [11]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [12]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [13]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [14]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [15]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [16]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [17]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [18]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [19]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [20]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [21]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [22]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [23]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [24]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [25]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [26]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [27]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [28]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [29]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [30]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [31]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [32]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [33]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [34]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [35]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [36]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [37]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [38]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [39]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [40]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [41]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [42]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [43]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [44]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [45]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [46]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [47]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [48]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [49]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [50]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [51]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [52]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [53]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [54]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [55]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [56]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [57]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [58]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [59]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [60]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [61]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [62]: undriven on gate side.
  Skipping signal bit op1__h1383_gate [63]: undriven on gate side.
Presumably equivalent wires: quotient_remainder_gold (\quotient_remainder_gold), quotient_remainder_gate (\_3467_.IQ_gate) -> quotient_remainder
Presumably equivalent wires: quotient_remainder_D_IN_gold (\ma_inputs_funct3_gold [1]), quotient_remainder_D_IN_gate (\ma_inputs_funct3_gate [1]) -> quotient_remainder_D_IN
Presumably equivalent wires: quotient_remainder_EN_gold (\EN_ma_inputs_gold), quotient_remainder_EN_gate (\EN_ma_inputs_gate) -> quotient_remainder_EN
Presumably equivalent wires: rg_complement_gold (\rg_complement_gold), rg_complement_gate (\_3466_.IQ_gate) -> rg_complement
Presumably equivalent wires: rg_complement_EN_gold (\EN_ma_inputs_gold), rg_complement_EN_gate (\EN_ma_inputs_gate) -> rg_complement_EN
Presumably equivalent wires: rg_count_gold (\rg_count_gold), rg_count_gate ({ \_3537_.IQ_gate \_3536_.IQ_gate \_3535_.IQ_gate \_3534_.IQ_gate \_3533_.IQ_gate \_3532_.IQ_gate }) -> rg_count
Presumably equivalent wires: rg_in1_gold (\rg_in1_gold), rg_in1_gate ({ \_3531_.IQ_gate \_3530_.IQ_gate \_3529_.IQ_gate \_3528_.IQ_gate \_3527_.IQ_gate \_3526_.IQ_gate \_3525_.IQ_gate \_3524_.IQ_gate \_3523_.IQ_gate \_3522_.IQ_gate \_3521_.IQ_gate \_3520_.IQ_gate \_3519_.IQ_gate \_3518_.IQ_gate \_3517_.IQ_gate \_3516_.IQ_gate \_3515_.IQ_gate \_3514_.IQ_gate \_3513_.IQ_gate \_3512_.IQ_gate \_3511_.IQ_gate \_3510_.IQ_gate \_3509_.IQ_gate \_3508_.IQ_gate \_3507_.IQ_gate \_3506_.IQ_gate \_3505_.IQ_gate \_3504_.IQ_gate \_3503_.IQ_gate \_3502_.IQ_gate \_3501_.IQ_gate \_3500_.IQ_gate \_3499_.IQ_gate \_3498_.IQ_gate \_3497_.IQ_gate \_3496_.IQ_gate \_3495_.IQ_gate \_3494_.IQ_gate \_3493_.IQ_gate \_3492_.IQ_gate \_3491_.IQ_gate \_3490_.IQ_gate \_3489_.IQ_gate \_3488_.IQ_gate \_3487_.IQ_gate \_3486_.IQ_gate \_3485_.IQ_gate \_3484_.IQ_gate \_3483_.IQ_gate \_3482_.IQ_gate \_3481_.IQ_gate \_3480_.IQ_gate \_3479_.IQ_gate \_3478_.IQ_gate \_3477_.IQ_gate \_3476_.IQ_gate \_3475_.IQ_gate \_3474_.IQ_gate \_3473_.IQ_gate \_3472_.IQ_gate \_3471_.IQ_gate \_3470_.IQ_gate \_3469_.IQ_gate \_3468_.IQ_gate }) -> rg_in1
Presumably equivalent wires: rg_in1_D_IN_gold (\ma_inputs_in1_gold), rg_in1_D_IN_gate (\ma_inputs_in1_gate) -> rg_in1_D_IN
Presumably equivalent wires: rg_in1_EN_gold (\EN_ma_inputs_gold), rg_in1_EN_gate (\EN_ma_inputs_gate) -> rg_in1_EN
Presumably equivalent wires: rg_op2_gold (\rg_op2_gold), rg_op2_gate ({ \_3462_.IQ_gate \_3461_.IQ_gate \_3460_.IQ_gate \_3459_.IQ_gate \_3458_.IQ_gate \_3457_.IQ_gate \_3456_.IQ_gate \_3455_.IQ_gate \_3454_.IQ_gate \_3453_.IQ_gate \_3452_.IQ_gate \_3451_.IQ_gate \_3450_.IQ_gate \_3449_.IQ_gate \_3448_.IQ_gate \_3447_.IQ_gate \_3446_.IQ_gate \_3445_.IQ_gate \_3444_.IQ_gate \_3443_.IQ_gate \_3442_.IQ_gate \_3441_.IQ_gate \_3440_.IQ_gate \_3439_.IQ_gate \_3438_.IQ_gate \_3437_.IQ_gate \_3436_.IQ_gate \_3435_.IQ_gate \_3434_.IQ_gate \_3433_.IQ_gate \_3432_.IQ_gate \_3431_.IQ_gate \_3430_.IQ_gate \_3429_.IQ_gate \_3428_.IQ_gate \_3427_.IQ_gate \_3426_.IQ_gate \_3425_.IQ_gate \_3424_.IQ_gate \_3423_.IQ_gate \_3422_.IQ_gate \_3421_.IQ_gate \_3420_.IQ_gate \_3419_.IQ_gate \_3418_.IQ_gate \_3417_.IQ_gate \_3416_.IQ_gate \_3415_.IQ_gate \_3414_.IQ_gate \_3413_.IQ_gate \_3412_.IQ_gate \_3411_.IQ_gate \_3410_.IQ_gate \_3409_.IQ_gate \_3408_.IQ_gate \_3407_.IQ_gate \_3406_.IQ_gate \_3405_.IQ_gate \_3404_.IQ_gate \_3403_.IQ_gate \_3402_.IQ_gate \_3401_.IQ_gate \_3400_.IQ_gate \_3399_.IQ_gate }) -> rg_op2
Presumably equivalent wires: rg_op2_EN_gold (\EN_ma_inputs_gold), rg_op2_EN_gate (\EN_ma_inputs_gate) -> rg_op2_EN
Presumably equivalent wires: rg_result_gold (\rg_result_gold), rg_result_gate ({ \_3730_.IQ_gate \_3729_.IQ_gate \_3728_.IQ_gate \_3727_.IQ_gate \_3726_.IQ_gate \_3725_.IQ_gate \_3724_.IQ_gate \_3723_.IQ_gate \_3722_.IQ_gate \_3721_.IQ_gate \_3720_.IQ_gate \_3719_.IQ_gate \_3718_.IQ_gate \_3717_.IQ_gate \_3716_.IQ_gate \_3715_.IQ_gate \_3714_.IQ_gate \_3713_.IQ_gate \_3712_.IQ_gate \_3711_.IQ_gate \_3710_.IQ_gate \_3709_.IQ_gate \_3708_.IQ_gate \_3707_.IQ_gate \_3706_.IQ_gate \_3705_.IQ_gate \_3704_.IQ_gate \_3703_.IQ_gate \_3702_.IQ_gate \_3701_.IQ_gate \_3700_.IQ_gate \_3699_.IQ_gate \_3698_.IQ_gate \_3697_.IQ_gate \_3696_.IQ_gate \_3695_.IQ_gate \_3694_.IQ_gate \_3693_.IQ_gate \_3692_.IQ_gate \_3691_.IQ_gate \_3690_.IQ_gate \_3689_.IQ_gate \_3688_.IQ_gate \_3687_.IQ_gate \_3686_.IQ_gate \_3685_.IQ_gate \_3684_.IQ_gate \_3683_.IQ_gate \_3682_.IQ_gate \_3681_.IQ_gate \_3680_.IQ_gate \_3679_.IQ_gate \_3678_.IQ_gate \_3677_.IQ_gate \_3676_.IQ_gate \_3675_.IQ_gate \_3674_.IQ_gate \_3673_.IQ_gate \_3672_.IQ_gate \_3671_.IQ_gate \_3670_.IQ_gate \_3669_.IQ_gate \_3668_.IQ_gate \_3667_.IQ_gate }) -> rg_result
Presumably equivalent wires: rg_sign_op1_gold (\rg_sign_op1_gold), rg_sign_op1_gate (\_3465_.IQ_gate) -> rg_sign_op1
Presumably equivalent wires: rg_sign_op1_D_IN_gold (\IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gold [63]), rg_sign_op1_D_IN_gate (\IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [63]) -> rg_sign_op1_D_IN
  Skipping signal bit rg_sign_op1_D_IN_gate [0]: undriven on gate side.
Presumably equivalent wires: rg_sign_op1_EN_gold (\EN_ma_inputs_gold), rg_sign_op1_EN_gate (\EN_ma_inputs_gate) -> rg_sign_op1_EN
Presumably equivalent wires: rg_upperbits_gold (\rg_upperbits_gold), rg_upperbits_gate (\_3464_.IQ_gate) -> rg_upperbits
Presumably equivalent wires: rg_upperbits_D_IN_gold (\ma_inputs_funct3_gold [1]), rg_upperbits_D_IN_gate (\ma_inputs_funct3_gate [1]) -> rg_upperbits_D_IN
Presumably equivalent wires: rg_upperbits_EN_gold (\EN_ma_inputs_gold), rg_upperbits_EN_gate (\EN_ma_inputs_gate) -> rg_upperbits_EN
Presumably equivalent wires: rg_valid_gold (\rg_valid_gold), rg_valid_gate (\_3463_.IQ_gate) -> rg_valid
Presumably equivalent wires: rg_valid_EN_gold (1'1), rg_valid_EN_gate (1'1) -> rg_valid_EN
Presumably equivalent wires: rg_word_gold (\rg_word_gold), rg_word_gate (\_3398_.IQ_gate) -> rg_word
Presumably equivalent wires: rg_word_D_IN_gold (\ma_inputs_word32_gold), rg_word_D_IN_gate (\ma_inputs_word32_gate) -> rg_word_D_IN
Presumably equivalent wires: rg_word_EN_gold (\EN_ma_inputs_gold), rg_word_EN_gate (\EN_ma_inputs_gate) -> rg_word_EN
Presumably equivalent wires: t1__h1428_gold ({ \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold \x__h1606_gold }), t1__h1428_gate ({ \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] \t1__h1428_gate [63] }) -> t1__h1428
  Skipping signal bit t1__h1428_gate [0]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [1]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [2]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [3]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [4]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [5]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [6]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [7]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [8]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [9]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [10]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [11]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [12]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [13]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [14]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [15]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [16]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [17]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [18]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [19]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [20]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [21]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [22]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [23]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [24]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [25]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [26]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [27]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [28]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [29]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [30]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [31]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [32]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [33]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [34]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [35]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [36]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [37]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [38]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [39]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [40]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [41]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [42]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [43]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [44]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [45]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [46]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [47]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [48]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [49]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [50]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [51]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [52]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [53]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [54]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [55]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [56]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [57]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [58]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [59]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [60]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [61]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [62]: undriven on gate side.
  Skipping signal bit t1__h1428_gate [63]: undriven on gate side.
Presumably equivalent wires: t2__h1429_gold ({ \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold \x__h1642_gold }), t2__h1429_gate ({ \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] \t2__h1429_gate [63] }) -> t2__h1429
  Skipping signal bit t2__h1429_gate [0]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [1]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [2]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [3]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [4]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [5]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [6]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [7]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [8]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [9]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [10]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [11]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [12]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [13]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [14]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [15]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [16]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [17]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [18]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [19]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [20]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [21]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [22]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [23]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [24]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [25]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [26]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [27]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [28]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [29]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [30]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [31]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [32]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [33]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [34]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [35]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [36]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [37]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [38]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [39]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [40]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [41]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [42]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [43]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [44]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [45]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [46]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [47]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [48]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [49]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [50]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [51]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [52]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [53]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [54]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [55]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [56]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [57]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [58]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [59]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [60]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [61]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [62]: undriven on gate side.
  Skipping signal bit t2__h1429_gate [63]: undriven on gate side.
Presumably equivalent wires: x_BITS_63_TO_0___h1184_gold (\partial_gold [63:0]), x_BITS_63_TO_0___h1184_gate ({ \_3601_.IQ_gate \_3600_.IQ_gate \_3599_.IQ_gate \_3598_.IQ_gate \_3597_.IQ_gate \_3596_.IQ_gate \_3595_.IQ_gate \_3594_.IQ_gate \_3593_.IQ_gate \_3592_.IQ_gate \_3591_.IQ_gate \_3590_.IQ_gate \_3589_.IQ_gate \_3588_.IQ_gate \_3587_.IQ_gate \_3586_.IQ_gate \_3585_.IQ_gate \_3584_.IQ_gate \_3583_.IQ_gate \_3582_.IQ_gate \_3581_.IQ_gate \_3580_.IQ_gate \_3579_.IQ_gate \_3578_.IQ_gate \_3577_.IQ_gate \_3576_.IQ_gate \_3575_.IQ_gate \_3574_.IQ_gate \_3573_.IQ_gate \_3572_.IQ_gate \_3571_.IQ_gate \_3570_.IQ_gate \_3569_.IQ_gate \_3568_.IQ_gate \_3567_.IQ_gate \_3566_.IQ_gate \_3565_.IQ_gate \_3564_.IQ_gate \_3563_.IQ_gate \_3562_.IQ_gate \_3561_.IQ_gate \_3560_.IQ_gate \_3559_.IQ_gate \_3558_.IQ_gate \_3557_.IQ_gate \_3556_.IQ_gate \_3555_.IQ_gate \_3554_.IQ_gate \_3553_.IQ_gate \_3552_.IQ_gate \_3551_.IQ_gate \_3550_.IQ_gate \_3549_.IQ_gate \_3548_.IQ_gate \_3547_.IQ_gate \_3546_.IQ_gate \_3545_.IQ_gate \_3544_.IQ_gate \_3543_.IQ_gate \_3542_.IQ_gate \_3541_.IQ_gate \_3540_.IQ_gate \_3539_.IQ_gate \_3538_.IQ_gate }) -> x_BITS_63_TO_0___h1184
Presumably equivalent wires: x__h1606_gold (\x__h1606_gold), x__h1606_gate (\t1__h1428_gate [63]) -> x__h1606
  Skipping signal bit x__h1606_gate [0]: undriven on gate side.
Presumably equivalent wires: x__h1642_gold (\x__h1642_gold), x__h1642_gate (\t2__h1429_gate [63]) -> x__h1642
  Skipping signal bit x__h1642_gate [0]: undriven on gate side.
Setting undriven nets to undef: \instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9
Setting undriven nets to undef: \instance_fn_single_div_0.x__h171
Setting undriven nets to undef: \IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83_gate [63:32]
Setting undriven nets to undef: \IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71_gate [63:32]
Setting undriven nets to undef: \MUX_partial_write_1__VAL_2_gate [63:0]
Setting undriven nets to undef: \t2__h1429_gate [63]
Setting undriven nets to undef: \t1__h1428_gate [63]
Setting undriven nets to undef: \instance_fn_single_div_0.remainder__h71_gate [64:1]
Setting undriven nets to undef: \_theResult___fst__h1524_gate [63]
Setting undriven nets to undef: \_theResult___snd__h1525_gate [63]
Setting undriven nets to undef: \instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [62:0]
Setting undriven nets to undef: \instance_fn_single_div_0.SEXT_INV_fn_single_div_divisor_PLUS_1____d9_gate [64]
Setting undriven nets to undef: \rg_sign_op1_D_IN
Setting undriven nets to undef: \MUX_partial_write_1__VAL_2 [63:0]
Setting undriven nets to undef: \IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d71 [63:32]
Setting undriven nets to undef: \IF_ma_inputs_word32_THEN_IF_ma_inputs_funct3_B_ETC___d83 [63:32]
Setting undriven nets to undef: \_theResult___fst__h1524 [63:32]
Setting undriven nets to undef: \_theResult___snd__h1525 [63:32]
Setting undriven nets to undef: \op1__h1383
Setting undriven nets to undef: \t1__h1428
Setting undriven nets to undef: \t2__h1429
Setting undriven nets to undef: \x__h1606
Setting undriven nets to undef: \x__h1642

150. Executing HIERARCHY pass (managing design hierarchy).

150.1. Analyzing design hierarchy..
Top module:  \equiv

150.2. Analyzing design hierarchy..
Top module:  \equiv
Removing unused module `\gate'.
Removing unused module `\gold'.
Removed 2 unused modules.

151. Executing EQUIV_INDUCT pass.
Found 932 unproven $equiv cells in module equiv:
  Proving existence of base case for step 1. (176038 clauses over 67817 variables)
  Proving induction step 1. (358725 clauses over 137628 variables)
  Proof for induction step holds. Entire workset of 932 cells proven!
Proved 932 previously unproven $equiv cells.

152. Executing EQUIV_STATUS pass.
Found 932 $equiv cells in equiv:
  Of those cells 932 are proven and 0 are unproven.
  Equivalence successfully proven!

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 45c8269f92
CPU: user 18.67s system 0.15s, MEM: 207.93 MB total, 200.61 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 63% 1x equiv_induct (11 sec), 11% 147x read_verilog (2 sec), ...
